// #Область ОписаниеФункции
&НаСервере
Функция СоздатьУзелОбмена(КодУзла, НаименованиеМобильногоКомпьютера, НомерОтправленного = 0, НомерПринятого = 0) Экспорт
    УстановитьПривилегированныйРежим(Истина);

    // #Область ПроверкаИСозданиеЦентральногоУзла
    ЦентральныйУзел = ПланыОбмена.Мобильные.ЭтотУзел().ПолучитьОбъект();
    Если НЕ ЗначениеЗаполнено(ЦентральныйУзел.Код) Тогда
        ЦентральныйУзел.Код = "001";
        ЦентральныйУзел.Наименование = "Центральный";
        ЦентральныйУзел.Записать();
    КонецЕсли;
    // #КонецОбласти

    // #Область ПоискИлиСозданиеУзла
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла);

    Если УзелОбмена.Пустая() Тогда
        // #Область СозданиеНовогоУзла
        НовыйУзел = ПланыОбмена.Мобильные.СоздатьУзел();
        
        НачатьТранзакцию();
        Попытка
            Блокировка = Новый БлокировкаДанных;
            ЭлементБлокировки = Блокировка.Добавить("Константа.КодНовогоУзлаПланаОбмена");
            ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
            Блокировка.Заблокировать();
            
            КодНовогоУзла = Константы.КодНовогоУзлаПланаОбмена.Получить();
            Если КодНовогоУзла = 0 Тогда
                КодНовогоУзла = 2; // Начинаем с 2, чтобы не пересекаться с "001"
            КонецЕсли;
            Константы.КодНовогоУзлаПланаОбмена.Установить(КодНовогоУзла + 1);
            
            Если СтрДлина(КодНовогоУзла) < 3 Тогда
                НовыйУзел.Код = Формат(КодНовогоУзла, "ЧЦ=3; ЧВН=");
            Иначе
                НовыйУзел.Код = КодНовогоУзла;
            КонецЕсли;
            
            НовыйУзел.Наименование = НаименованиеМобильногоКомпьютера;
            НовыйУзел.НомерОтправленного = НомерОтправленного;
            НовыйУзел.НомерПринятого = НомерПринятого;
            НовыйУзел.Записать();
            
            ОбменМобильныеСервер.ЗарегистрироватьИзмененияДанных(НовыйУзел.Ссылка);
            
            УзелОбмена = НовыйУзел.Ссылка;
            
            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
            ВызватьИсключение "Ошибка при создании узла обмена: " + ОписаниеОшибки();
        КонецПопытки;
        // #КонецОбласти
    Иначе
        // #Область ОбновлениеСуществующегоУзла
        Узел = УзелОбмена.ПолучитьОбъект();
        Если УзелОбмена.ПометкаУдаления Или УзелОбмена.Наименование <> НаименованиеМобильногоКомпьютера Тогда
            Узел.ПометкаУдаления = Ложь;
            Узел.Наименование = НаименованиеМобильногоКомпьютера;
            Узел.Записать();
        КонецЕсли;
        
        Если УзелОбмена.НомерОтправленного <> НомерОтправленного Или
           УзелОбмена.НомерПринятого <> НомерПринятого Тогда
            Узел.НомерОтправленного = НомерОтправленного;
            Узел.НомерПринятого = НомерПринятого;
            Узел.Записать();
        КонецЕсли;
        // #КонецОбласти
    КонецЕсли;
    // #КонецОбласти

    Возврат УзелОбмена.Код;
КонецФункции

// Подтверждает получение данных, увеличивая номер отправленного сообщения и удаляя регистрацию изменений.
Процедура ПодтвердитьПолучение(КодУзла) Экспорт
    УстановитьПривилегированныйРежим(Истина);
    
    // Поиск узла обмена по коду
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду(КодУзла);
    Если УзелОбмена.Пустая() Тогда
        ВызватьИсключение "Узел обмена с кодом " + КодУзла + " не найден";
    КонецЕсли;
    
    Попытка
        // Получаем объект узла для изменения
        Узел = УзелОбмена.ПолучитьОбъект();
        
        // Увеличиваем номер отправленного сообщения
        Узел.НомерОтправленного = Узел.НомерОтправленного + 1;
        
        // Записываем изменения в узел
        Узел.Записать();
        
        // Удаляем регистрацию изменений для этого узла, чтобы избежать повторной отправки
        ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена);
        
    Исключение
        // Логирование ошибки
        ВызватьИсключение "Ошибка подтверждения получения: " + ОписаниеОшибки();
    КонецПопытки;
КонецПроцедуры

// Формирует пакет обмена для узла
Функция СформироватьПакетОбмена(УзелОбмена) Экспорт
    УстановитьПривилегированныйРежим(Истина);
    ЗаписьXML = Новый ЗаписьXML;
    
    ЗаписьXML.УстановитьСтроку("UTF-8");
    ЗаписьXML.ЗаписатьОбъявлениеXML();
    
    ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
    ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);                    
    
    ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
    ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
    
    ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
    Пока ВыборкаИзменений.Следующий() Цикл
        Данные = ВыборкаИзменений.Получить();
        
        Если Не НуженПереносДанных(Данные, УзелОбмена) Тогда
            УдалениеДанных(Данные);
        КонецЕсли;
        
        ЗаписатьXML(ЗаписьXML, Данные);
    КонецЦикла;
    
    ЗаписьСообщения.ЗакончитьЗапись();
    
    Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
КонецФункции

// Принимает пакет обмена от узла
Процедура ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена) Экспорт
    УстановитьПривилегированныйРежим(Истина);
    ЧтениеXML = Новый ЧтениеXML;
    ЧтениеXML.УстановитьСтроку(ДанныеОбмена.Получить());
    ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
    ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
    ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);

    НачатьТранзакцию();
    Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
        Данные = ПрочитатьXML(ЧтениеXML);
        Если Данные <> Неопределено Тогда
            Если Не ПринятьИзменения(ЧтениеСообщения.Отправитель, Данные) Тогда
                Продолжить;
            КонецЕсли;
            Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
            Данные.ОбменДанными.Загрузка = Истина;
            Данные.Записать();
        КонецЕсли;
    КонецЦикла;
    ЗафиксироватьТранзакцию();
    
    ЧтениеСообщения.ЗакончитьЧтение();
    ЧтениеXML.Закрыть();
КонецПроцедуры

// Проверяет необходимость переноса данных
Функция НуженПереносДанных(Данные, УзелОбмена) Экспорт
    Перенос = Истина;
    
    Если ТипЗнч(Данные) = Тип("ДокументОбъект.Поездка") Тогда
        Если НЕ УзелОбмена.Пользователь.Пустая() Тогда
            Если Данные.Водитель <> УзелОбмена.Пользователь Тогда
                Перенос = Ложь;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    Если ТипЗнч(Данные) = Тип("СправочникОбъект.Пользователи") Или
         ТипЗнч(Данные) = Тип("СправочникОбъект.Маршруты") Или
         ТипЗнч(Данные) = Тип("СправочникОбъект.Адреса") Или
         ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.КоординатыПоездок") Тогда
        Перенос = Истина;
    КонецЕсли;
    
    Возврат Перенос;
КонецФункции

// Удаляет данные, если они не нужны
Процедура УдалениеДанных(Данные)
    Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
        Данные.Записать();
    КонецЕсли;
КонецПроцедуры

// Проверяет возможность принятия изменений
Функция ПринятьИзменения(Отправитель, Данные)
    Возврат Истина; // Можно добавить логику проверки конфликтов
КонецФункции

// Инициализирует обмен с узлом
Функция НачатьОбмен(КодУзла, НаименованиеМобильногоКомпьютера, НомерОтправленного, НомерПринятого) Экспорт
    УстановитьПривилегированныйРежим(Истина);
    
    УзелОбмена = ПланыОбмена.Мобильные.ЭтотУзел().ПолучитьОбъект();
    Если НЕ ЗначениеЗаполнено(УзелОбмена.Код) Тогда
        УзелОбмена.Код = "001";
        УзелОбмена.Наименование = "Центральный";
        УзелОбмена.Записать();
    КонецЕсли;
    
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду("010");
    Если УзелОбмена.Пустая() Тогда
        НовыйУзел = ПланыОбмена.Мобильные.СоздатьУзел();
        НовыйУзел.Код = "010";
        НовыйУзел.Наименование = НаименованиеМобильногоКомпьютера;
        НовыйУзел.НомерОтправленного = НомерОтправленного;
        НовыйУзел.НомерПринятого = НомерПринятого;
        НовыйУзел.Записать();
        ЗарегистрироватьИзмененияДанных(НовыйУзел.Ссылка);
        УзелОбмена = НовыйУзел.Ссылка;
    Иначе
        Если УзелОбмена.ПометкаУдаления ИЛИ УзелОбмена.Наименование <> НаименованиеМобильногоКомпьютера Тогда
            Узел = УзелОбмена.ПолучитьОбъект();
            Узел.ПометкаУдаления = Ложь;
            Узел.Наименование = НаименованиеМобильногоКомпьютера;
            Узел.Записать();
        КонецЕсли;
        
        Если УзелОбмена.НомерОтправленного <> НомерОтправленного ИЛИ
             УзелОбмена.НомерПринятого <> НомерПринятого Тогда
            Узел = УзелОбмена.ПолучитьОбъект();
            Узел.НомерОтправленного = НомерОтправленного;
            Узел.НомерПринятого = НомерПринятого;
            Узел.Записать();
            ЗарегистрироватьИзмененияДанных(УзелОбмена);
        КонецЕсли;
    КонецЕсли;
    
    Возврат "010";
КонецФункции

// Получает данные для узла
Функция ПолучитьДанные(КодУзла) Экспорт
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду("010");
    Если УзелОбмена.Пустая() Тогда
        ВызватьИсключение "Неизвестное устройство - 010";
    КонецЕсли;
    
    Возврат СформироватьПакетОбмена(УзелОбмена);
КонецФункции

// Записывает данные от узла
Функция ЗаписатьДанные(КодУзла, ДанныеМобильногоПриложения) Экспорт
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду("010");
    Если УзелОбмена.Пустая() Тогда
        ВызватьИсключение "Неизвестное устройство - 010";
    КонецЕсли;
    
    ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения);
КонецФункции

// Выполняет полный обмен данными
Функция ВыполнитьОбменДанными(КодУзла, ДанныеМобильногоПриложения) Экспорт
    УзелОбмена = ПланыОбмена.Мобильные.НайтиПоКоду("010");
    Если УзелОбмена.Пустая() Тогда
        ВызватьИсключение "Неизвестное устройство - 010";
    КонецЕсли;
    
    ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения);
    Возврат СформироватьПакетОбмена(УзелОбмена);
КонецФункции

// Регистрирует изменения для узла
Процедура ЗарегистрироватьИзмененияДанных(Узел) Экспорт
    ПланыОбмена.ЗарегистрироватьИзменения(Узел);
КонецПроцедуры