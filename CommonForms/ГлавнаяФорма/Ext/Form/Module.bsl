// Глобальная переменная для управления обновлением
&НаКлиенте
Перем ОбновлениеВремениАктивно Экспорт;
&НаКлиенте
Перем ПодключениеОжидается Экспорт; // Флаг ожидания подключения

&НаКлиенте
Процедура ПоказатьМоёМестоположение(Команда)
	#Если МобильноеПриложениеКлиент Тогда
        Попытка
			НайденныйПровайдер = СредстваГеопозиционирования.ПолучитьСамогоЭнергоЭкономичногоПровайдера();
			Местоположение = СредстваГеопозиционирования.ПолучитьПоследнееМестоположение(НайденныйПровайдер.Имя);
			ДанныеАдреса = ПолучитьАдресПоМестоположению(Местоположение.Координаты);
			ПоказатьНаКарте(Местоположение.Координаты);
        Исключение
            ПоказатьПредупреждение(, "Ошибка геолокации: " + ОписаниеОшибки());
        КонецПопытки;
    #КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяВПанельВхода(Команда)
	Закрыть();
	ОткрытьФорму("ОбщаяФорма.Авторизация");
КонецПроцедуры

Процедура СинхронизироватьНажатие()
    MobileSync.СинхронизироватьДанныеНажатие();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СинхронизироватьНажатие();
	ОбновитьДатуВремяНаСервере();
	Если Параметры.Свойство("Логин") Тогда
        Логин = Параметры.Логин;
    КонецЕсли;
    
    Если Параметры.Свойство("Пароль") Тогда
        Пароль = Параметры.Пароль;
	КонецЕсли;
	
	// Переменная для хранения найденного пользователя
	НайденныйПользовательРоль = Неопределено;

	// Перебор пользователей
	Выборка = Справочники.Пользователи.Выбрать();
	Пока Выборка.Следующий() Цикл
    	Если Не ПустаяСтрока(Выборка.Логин) И Не ПустаяСтрока(Выборка.Пароль) Тогда
        	// Проверка хэша логина
        	Если СервисАвторизации.ПроверитьПароль(Выборка.Логин, Логин) Тогда
            	// Проверка хэша пароля
            	Если СервисАвторизации.ПроверитьПароль(Выборка.Пароль, Пароль) Тогда
                	НайденныйПользовательРоль = Выборка;
                	Прервать; // Прерываем цикл, если пользователь найден
            	КонецЕсли;
        	КонецЕсли;
    	КонецЕсли;
	КонецЦикла;

	// Вывод данных пользователя
	Если НайденныйПользовательРоль <> Неопределено Тогда
    	Элементы.НадписьПриветствие.Заголовок = СтрШаблон("Добро пожаловать, %1!", 
                                                    НайденныйПользовательРоль.Наименование);
		Элементы.НадписьРоль.Заголовок = СтрШаблон("Ваша роль: %1",  
                                                    НайденныйПользовательРоль.Роль);
	КонецЕсли;
												
	// Управление видимостью элементов в зависимости от роли
	Если НайденныйПользовательРоль <> Неопределено И НайденныйПользовательРоль.Роль = Перечисления.Роль.Водитель Тогда
		Элементы.ЗаписанныеПоездки.Видимость = Ложь;
        // Показываем элементы для водителя
        Элементы.ДатаВыбора.Видимость = Истина;
        Элементы.ТаблицаПоездок.Видимость = Истина;
		Элементы.ЗаписатьсяНаПоездку.Видимость = Ложь;
        // Установка текущей даты по умолчанию
        Если Не ЗначениеЗаполнено(ДатаВыбора) Тогда
            ДатаВыбора = НачалоДня(ТекущаяДата());
        КонецЕсли;
        
        ТекущийПользователь = НайденныйПользовательРоль.Наименование;
		ПользовательРоль = "Водитель";
		Элементы.НоваяДекор.Видимость = Ложь;
		Элементы.ОтменитьПоездку.Видимость = Ложь;
		Элементы.ПоказатьНаКартеПоследнееМесто.Видимость = Ложь;
		Элементы.ОтобразитьМаршрут.Видимость = Ложь;
		Элементы.РасширеннаяИнформация.Видимость = Ложь;
		Элементы.СоздатьНапоминаниеНажатие.Видимость = Ложь;
        // Обновление таблицы поездок
        ОбновитьТаблицуПоездок(ТекущийПользователь);
	Иначе
		Элементы.ДекорацияПоездкиПассажир.Видимость = Ложь;
		ПользовательРоль = "Пассажир";
        Элементы.ТаблицаПоездок.Видимость = Ложь;
		Элементы.КнопкаЗавершитьПоездкуНажатие.Видимость = Ложь;
		Элементы.КнопкаНачатьПоездку.Видимость = Ложь;
		Элементы.КнопкаОткрытьПоездкуНажатие.Видимость = Ложь;
		Элементы.ПоказатьНаКарте.Видимость = Ложь;
		Элементы.ЗаписанныеПоездки.Видимость = Истина;
		
		// Установка текущей даты по умолчанию
        Если Не ЗначениеЗаполнено(ДатаВыбора) Тогда
            ДатаВыбора = НачалоДня(ТекущаяДата());
        КонецЕсли;
        
        ТекущийПользователь = НайденныйПользовательРоль.Наименование;
        // Обновление таблицы поездок
        ОбновитьДанныеНаФорме(ТекущийПользователь);

    КонецЕсли;
	
КонецПроцедуры

// Обновление данных на форме
&НаСервере
Процедура ОбновитьДанныеНаФорме(ТекущийПользователь)
	ЗаписанныеПоездки.Очистить();
	
	// Запрос к документу Поездка
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаЗабронированныеМеста.Ссылка КАК Ссылка,
		|	ПоездкаЗабронированныеМеста.Ссылка КАК Поездка,
		|	ЕСТЬNULL(ПоездкаЗабронированныеМеста.ОстановкаПосадки.Наименование, """") КАК НачальнаяТочка,
		|	ЕСТЬNULL(ПоездкаЗабронированныеМеста.ОстановкаВысадки.Наименование, """") КАК КонечнаяТочка,
		|	ПоездкаЗабронированныеМеста.Ссылка.ПоездкаНачалась КАК ПоездкаНачалась,
		|	ПоездкаЗабронированныеМеста.Ссылка.ПоездкаЗавершена КАК ПоездкаЗавершена
		|ИЗ
		|	Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
		|ГДЕ
		|	ПоездкаЗабронированныеМеста.Пассажир = &ТекущийПользователь
		|	И ПоездкаЗабронированныеМеста.БроньОтменена = ЛОЖЬ
		|	И ПоездкаЗабронированныеМеста.Ссылка.ДатаПоездки >= &ДатаНачала
		|	И ПоездкаЗабронированныеМеста.Ссылка.ДатаПоездки < &ДатаКонец";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаВыбора));
	Запрос.УстановитьПараметр("ДатаКонец", КонецДня(ДатаВыбора));	
	// Выполнение запроса и заполнение таблицы
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ЗаписанныеПоездки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Статус = РассчитатьСтатус(Выборка.ПоездкаНачалась, Выборка.ПоездкаЗавершена);
		КонецЦикла;
		// Скрываем декорацию, если есть поездки
		Элементы.НоваяДекор.Видимость = Ложь;
		Элементы.ЗаписанныеПоездки.Видимость = Истина;
	Иначе
        // Показываем декорацию с текстом, если поездок нет
		Если ПользовательРоль = "Пассажир" Тогда
        	
        	Элементы.НоваяДекор.Видимость = Истина;
		
		Иначе
        	
        	Элементы.ДекорацияПоездкиПассажир.Видимость = Ложь;

		КонецЕсли;
		
		Элементы.ЗаписанныеПоездки.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

// Расчёт статуса поездки
&НаСервере
Функция РассчитатьСтатус(ПоездкаНачалась, ПоездкаЗавершена)
	Если ПоездкаНачалась И ПоездкаЗавершена Тогда
		Возврат "Поездка завершена";
	ИначеЕсли ПоездкаНачалась И НЕ ПоездкаЗавершена Тогда
		Возврат "В пути";
	Иначе
		Возврат "Поездка не началась";
	КонецЕсли;
КонецФункции

// Обработчик оповещения в главной форме
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
    Если ИмяСобытия = "ОбновитьТаблицуПоездок" Тогда
        // Перечитываем данные и обновляем таблицу для текущего пользователя
        ОбновитьТаблицуПоездок(ТекущийПользователь);
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДоступныеПоездки" Тогда
        // Перечитываем данные и обновляем таблицу для текущего пользователя
        ОбновитьДанныеНаФорме(ТекущийПользователь);
    КонецЕсли;

КонецПроцедуры

// Процедура обновления таблицы поездок
&НаСервере
Процедура ОбновитьТаблицуПоездок(ТекущийПользователь)
    ТаблицаПоездок.Очистить();
    
    // Запрос к документу Поездка с корректной группировкой
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   Поездка.Ссылка КАК Поездка,
    |   Поездка.ПоездкаНачалась,
    |   Поездка.ПоездкаЗавершена,
    |   МИНИМУМ(ЕСТЬNULL(ПоездкаМаршрутПоездки.Время, ДАТАВРЕМЯ(1,1,1))) КАК ВремяНачала,
    |   МАКСИМУМ(ЕСТЬNULL(ПоездкаМаршрутПоездки.Время, ДАТАВРЕМЯ(1,1,1))) КАК ВремяОкончания
    |ИЗ
    |   Документ.Поездка КАК Поездка
    |       ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
    |       ПО Поездка.Ссылка = ПоездкаМаршрутПоездки.Ссылка
    |ГДЕ
    |   Поездка.ДатаПоездки >= &ДатаНачала
    |   И Поездка.ДатаПоездки < &ДатаКонец
    |   И Поездка.Водитель = &ТекущийПользователь
    |СГРУППИРОВАТЬ ПО
    |   Поездка.Ссылка,
    |   Поездка.ПоездкаНачалась,
    |   Поездка.ПоездкаЗавершена";
    
    // Установка параметров запроса
    Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаВыбора));
    Запрос.УстановитьПараметр("ДатаКонец", КонецДня(ДатаВыбора));
    Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
    
    // Выполнение запроса и заполнение таблицы
    Результат = Запрос.Выполнить();
    Если Не Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Пока Выборка.Следующий() Цикл
            НоваяСтрока = ТаблицаПоездок.Добавить();
            НоваяСтрока.Поездка = Выборка.Поездка;
            
            // Определение статуса на основе флагов
            Если Выборка.ПоездкаНачалась И Выборка.ПоездкаЗавершена Тогда
                НоваяСтрока.Статус = "Поездка завершена";
            ИначеЕсли Выборка.ПоездкаНачалась И Не Выборка.ПоездкаЗавершена Тогда
                НоваяСтрока.Статус = "В пути";
            Иначе
                НоваяСтрока.Статус = "Поездка не началась";
            КонецЕсли;
            
            НоваяСтрока.ВремяНачала = Выборка.ВремяНачала;
            НоваяСтрока.ВремяОкончания = Выборка.ВремяОкончания;
        КонецЦикла;
        // Скрываем декорацию, если есть поездки
        Элементы.ДекорацияПоездкиПассажир.Видимость = Ложь;
		Элементы.НоваяДекор.Видимость = Ложь;
		Элементы.ТаблицаПоездок.Видимость = Истина;
    Иначе
        // Показываем декорацию с текстом, если поездок нет
		Если ПользовательРоль = "Водитель" Тогда
        	
        	Элементы.ДекорацияПоездкиПассажир.Видимость = Истина;
		
		Иначе
        	
        	Элементы.ДекорацияПоездкиПассажир.Видимость = Ложь;

    	КонецЕсли;

		Элементы.ТаблицаПоездок.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения даты
&НаКлиенте
Процедура ДатаВыбораПриИзменении(Элемент)
   	// Управление видимостью элементов в зависимости от роли
	Если ПользовательРоль = "Водитель" Тогда
        // Обновление таблицы поездок
        ОбновитьТаблицуПоездок(ТекущийПользователь);
		
	Иначе
        // Обновление таблицы поездок
        ОбновитьДанныеНаФорме(ТекущийПользователь);

    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьДатуВремяНаКлиенте", 300);
	// Инициализация
	ПодключениеОжидается = Ложь;
	// Запускаем проверку сети и таймер
	ПроверитьСетьИОбновить();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// Отключаем обработчик ожидания
	ОтключитьОбработчикОжидания("ПроверитьСетьИОбновить");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСетьИОбновить() Экспорт
	#Если МобильноеПриложениеКлиент Тогда
		// Проверка доступности сети
		ПодключениеОжидается = Ложь;
		// Обновляем таблицу и записываем координаты
		ОбновитьИЗаписатьКоординаты();
		// Устанавливаем таймер на 5 секунд
		ПодключитьОбработчикОжидания("ПроверитьСетьИОбновить", 10, Истина);
	#Иначе
		// Для немобильного клиента сразу обновляем
		ОбновитьИЗаписатьКоординаты();
		ПодключитьОбработчикОжидания("ПроверитьСетьИОбновить", 10, Истина);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИЗаписатьКоординаты()
	// Обновляем таблицу поездок
	ОбновитьТаблицуПоездок(ТекущийПользователь);
	
	// Проверяем поездки со статусом "В пути"
	Для Каждого СтрокаТаблицы Из ТаблицаПоездок Цикл
		Если СтрокаТаблицы.Статус = "В пути" Тогда
			// Получаем текущие координаты
			Координаты = ПолучитьТекущиеКоординаты();
			Если Координаты <> Неопределено Тогда
				// Записываем координаты в регистр
				ЗаписатьКоординатыВРегистр(СтрокаТаблицы.Поездка, Координаты);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущиеКоординаты()
	#Если МобильноеПриложениеКлиент Тогда
		Попытка
			Провайдер = СредстваГеопозиционирования.ПолучитьСамогоЭнергоЭкономичногоПровайдера();
			Если СредстваГеопозиционирования.ОбновитьМестоположение(Провайдер.Имя, 60) Тогда
				ДанныеМестоположения = СредстваГеопозиционирования.ПолучитьПоследнееМестоположение(Провайдер.Имя);
				Возврат ДанныеМестоположения.Координаты;
			КонецЕсли;
		Исключение
			
			ТекстСообщения = "Ошибка получения координат: " + ОписаниеОшибки();
			ПоказатьПредупреждение(, НСтр("ru='" + ТекстСообщения + "'"));
			
		КонецПопытки;
	#КонецЕсли
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьКоординатыВРегистр(Поездка, Координаты)
	// Создаём запись в регистре сведений
	Запись = РегистрыСведений.КоординатыПоездок.СоздатьМенеджерЗаписи();
	Запись.Поездка = Поездка;
	Запись.ВремяГеопозиции = ТекущаяДатаСеанса();
	Запись.Координаты = Новый ХранилищеЗначения(Координаты);
	
	Попытка
		Запись.Записать(Истина);
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Ошибка записи координат: '") + ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступноПодключениеКИнтернету()
	Возврат СервисАвторизации.ПроверитьСвязьССервером();
КонецФункции

// Обновление даты и времени на сервере
&НаСервере
Процедура ОбновитьДатуВремяНаСервере()
    Элементы.НадписьДатаВремя.Заголовок = "Текущая дата: " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy'"); 
КонецПроцедуры

// Обновление даты и времени на клиенте
&НаКлиенте
Процедура ОбновитьДатуВремяНаКлиенте()
    Элементы.НадписьДатаВремя.Заголовок = "Текущая дата: " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy'"); 
КонецПроцедуры

// Обработчик нажатия кнопки "Начать поездку"
&НаКлиенте
Процедура КнопкаНачатьПоездкуНажатие(Элемент)
    // Получаем текущую строку таблицы
    ТекущиеДанные = Элементы.ТаблицаПоездок.ТекущиеДанные;
    Если ТекущиеДанные = Неопределено Тогда
        ПоказатьПредупреждение(, "Выберите поездку для начала.");
        Возврат;
    КонецЕсли;
    
    // Вызываем серверную процедуру для изменения статуса документа
    НачатьПоездкуНаСервере(ТекущиеДанные.Поездка);
    
    // Обновляем таблицу на форме
    ОбновитьТаблицуПоездок(ТекущийПользователь);
КонецПроцедуры

// Серверная процедура для изменения статуса документа
&НаСервере
Процедура НачатьПоездкуНаСервере(ПоездкаСсылка)
    // Получаем объект документа
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект();
    Если ДокументОбъект <> Неопределено Тогда
        // Устанавливаем флаг начала поездки и текущее время
        ДокументОбъект.ПоездкаНачалась = Истина;         
        // Сохраняем документ
        Попытка
            ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
        Исключение
            Сообщить("Ошибка при начале поездки: " + ОписаниеОшибки());
        КонецПопытки;
    Иначе
        Сообщить("Документ не найден.");
    КонецЕсли;
КонецПроцедуры

// Обработчик нажатия кнопки "Завершить поездку"
&НаКлиенте
Процедура КнопкаЗавершитьПоездкуНажатие(Элемент)
    // Получаем текущую строку таблицы
    ТекущиеДанные = Элементы.ТаблицаПоездок.ТекущиеДанные;
    Если ТекущиеДанные = Неопределено Тогда
        ПоказатьПредупреждение(, "Выберите поездку для завершения.");
        Возврат;
    КонецЕсли;
    
    // Проверяем, началась ли поездка
    Если Не ТекущиеДанные.Статус = "В пути" Тогда
        ПоказатьПредупреждение(, "Поездку можно завершить только если она находится в пути.");
        Возврат;
    КонецЕсли;
    
    // Вызываем серверную процедуру для изменения статуса документа
    ЗавершитьПоездкуНаСервере(ТекущиеДанные.Поездка);
    
    // Обновляем таблицу на форме
    ОбновитьТаблицуПоездок(ТекущийПользователь);
КонецПроцедуры

// Серверная процедура для изменения статуса документа на "Поездка завершена"
&НаСервере
Процедура ЗавершитьПоездкуНаСервере(ПоездкаСсылка)
    // Получаем объект документа
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект();
    Если ДокументОбъект <> Неопределено Тогда
        // Устанавливаем флаг завершения поездки и текущее время
        ДокументОбъект.ПоездкаЗавершена = Истина;        
        // Сохраняем документ
        Попытка
            ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
        Исключение
            Сообщить("Ошибка при завершении поездки: " + ОписаниеОшибки());
        КонецПопытки;
    Иначе
        Сообщить("Документ не найден.");
    КонецЕсли;
КонецПроцедуры

// Обработчик нажатия кнопки "Открыть поездку"
&НаКлиенте
Процедура КнопкаОткрытьПоездкуНажатие(Элемент)
    // Получаем текущую строку таблицы
    ТекущиеДанные = Элементы.ТаблицаПоездок.ТекущиеДанные;
    Если ТекущиеДанные = Неопределено Тогда
        ПоказатьПредупреждение(, "Выберите поездку для открытия.");
        Возврат;
    КонецЕсли;
    
    // Открываем форму документа с передачей ссылки на поездку
    ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Поездка);
    ОткрытьФорму("Документ.Поездка.Форма.ФормаДокументаПоездка", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМаршрут(Команда)
	
	СинхронизироватьНажатие();
	ТекущаяСтрока = "";
	
	// Показываем декорацию с текстом, если поездок нет
	Если ПользовательРоль = "Водитель" Тогда
        	
        ТекущаяСтрока = Элементы.ТаблицаПоездок.ТекущиеДанные;
		
	Иначе
        	
        ТекущаяСтрока = Элементы.ЗаписанныеПоездки.ТекущиеДанные;

	КонецЕсли;
		
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите поездку в таблице!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ДоступноПодключениеКИнтернету() Тогда
		ПоказатьПредупреждение(, "Нет интернет соединения!");
		Возврат;
	КонецЕсли;

	
	Поездка = ТекущаяСтрока.Поездка;
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		// Получаем текущее местоположение устройства
		ТекущееМестоположение = ПолучитьТекущееМестоположение();
		
		// Формируем URL для Google Maps
		URL = СформироватьURLМаршрута(ДанныеМаршрута, ТекущееМестоположение);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Ошибка запуска приложения карт: "  + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов показываем маршрут без местоположения
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		URL = СформироватьURLМаршрута(ДанныеМаршрута);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
		
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: "  + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущееМестоположение()
	ТекущееМестоположение = Неопределено;
	
	#Если МобильноеПриложениеКлиент Тогда
		Провайдер = СредстваГеопозиционирования.ПолучитьСамогоЭнергоЭкономичногоПровайдера();
		Если Провайдер = Неопределено Тогда
			ПоказатьПредупреждение(, "Нет доступных провайдеров геолокации!");
			Возврат ТекущееМестоположение;
		КонецЕсли;
		
		Попытка
			Если СредстваГеопозиционирования.ОбновитьМестоположение(Провайдер.Имя, 60) Тогда
				ДанныеМестоположения = СредстваГеопозиционирования.ПолучитьПоследнееМестоположение(Провайдер.Имя);
				Если ДанныеМестоположения <> Неопределено Тогда
					Координаты = ДанныеМестоположения.Координаты;
					Если Координаты.Широта >= -90 И Координаты.Широта <= 90 И Координаты.Долгота >= -180 И Координаты.Долгота <= 180 Тогда
						ТекущееМестоположение = Новый Структура("Широта, Долгота", Координаты.Широта, Координаты.Долгота);
					Иначе
						ПоказатьПредупреждение(, "Некорректные координаты!");
					КонецЕсли;
				Иначе
					ПоказатьПредупреждение(, "Данные местоположения не получены!");
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(, "Не удалось обновить местоположение!");
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(, "Ошибка геолокации: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		ПоказатьПредупреждение(, "Геолокация недоступна в этом клиенте!");
	#КонецЕсли
	
	Возврат ТекущееМестоположение;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрута(Поездка)
	// Запрос к табличной части МаршрутПоездки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоездкаМаршрутПоездки.Адрес.Страна КАК Страна,
	|	ПоездкаМаршрутПоездки.Адрес.Регион КАК Регион,
	|	ПоездкаМаршрутПоездки.Адрес.Город КАК Город,
	|	ПоездкаМаршрутПоездки.Адрес.Улица КАК Улица,
	|	ПоездкаМаршрутПоездки.Адрес.Дом КАК Дом,
	|	ПоездкаМаршрутПоездки.Адрес.Индекс КАК Индекс,
	|	ПоездкаМаршрутПоездки.Время КАК Время
	|ИЗ
	|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
	|ГДЕ
	|	ПоездкаМаршрутПоездки.Ссылка = &Поездка
	|УПОРЯДОЧИТЬ ПО
	|	ПоездкаМаршрутПоездки.Время";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем массив адресов
	ДанныеМаршрута = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		// Проверяем обязательность поля Город
		Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Страна", Выборка.Страна);
		СтруктураАдреса.Вставить("Регион", Выборка.Регион);
		СтруктураАдреса.Вставить("Город", Выборка.Город);
		СтруктураАдреса.Вставить("Улица", Выборка.Улица);
		СтруктураАдреса.Вставить("Дом", Выборка.Дом);
		СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
		СтруктураАдреса.Вставить("Время", Выборка.Время);
		ДанныеМаршрута.Добавить(СтруктураАдреса);
	КонецЦикла;
	
	Возврат ?(ДанныеМаршрута.Количество() > 0, ДанныеМаршрута, Неопределено);
КонецФункции

&НаКлиенте
Функция СформироватьURLМаршрута(ДанныеМаршрута, ТекущееМестоположение = Неопределено)
	// Проверяем, есть ли минимум два адреса для маршрута
	Если ДанныеМаршрута.Количество() < 2 Тогда
		Возврат "";
	КонецЕсли;
	
	// Формируем начальную точку
	ПервыйАдрес = ДанныеМаршрута[0];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Страна) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Страна);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Регион) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Дом);
	КонецЕсли;
	Начало = СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	
	// Формируем конечную точку
	ПоследнийАдрес = ДанныеМаршрута[ДанныеМаршрута.Количество() - 1];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Страна) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Страна);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Регион) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Дом);
	КонецЕсли;
	Конец = СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	
	// Формируем промежуточные точки (если есть)
	ПромежуточныеТочки = "";
	Для Индекс = 1 По ДанныеМаршрута.Количество() - 2 Цикл
		Адрес = ДанныеМаршрута[Индекс];
		ЧастиАдреса = Новый Массив;
		Если ЗначениеЗаполнено(Адрес.Индекс) Тогда
			ЧастиАдреса.Добавить(Адрес.Индекс);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Страна) Тогда
			ЧастиАдреса.Добавить(Адрес.Страна);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Регион) Тогда
			ЧастиАдреса.Добавить(Адрес.Регион);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Город) Тогда
			ЧастиАдреса.Добавить(Адрес.Город);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Улица) Тогда
			ЧастиАдреса.Добавить(Адрес.Улица);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Дом) Тогда
			ЧастиАдреса.Добавить(Адрес.Дом);
		КонецЕсли;
		ПромежуточныеТочки = ПромежуточныеТочки + ?(ПромежуточныеТочки = "", "", "|") + 
			СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	КонецЦикла;
		
	Если ТекущееМестоположение <> Неопределено Тогда
	     Метка = Формат(ТекущееМестоположение.Широта, "ЧРД=.; ЧГ=0") + "," + Формат(ТекущееМестоположение.Долгота, "ЧРД=.; ЧГ=0");
	     URL = URL + "&q=" + Метка;
	КонецЕсли;

	
	// Формируем URL
	URL = "https://maps.google.com/maps?saddr=" + Начало + "&daddr=" + Конец;
	Если ПромежуточныеТочки <> "" Тогда
		URL = URL + "+to:" + ПромежуточныеТочки;
	КонецЕсли;
	
	Возврат URL;
КонецФункции

// Клиентская процедура для обработки нажатия кнопки
&НаКлиенте
Процедура ПоказатьНаКартеПоследнееМесто(Команда)
	СинхронизироватьНажатие();
	// Проверяем, выделена ли строка
	ТекущаяСтрока = Элементы.ЗаписанныеПоездки.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите поездку в таблице!");
		Возврат;
	КонецЕсли;
	
	// Получаем поездку из текущей строки
	Поездка = ТекущаяСтрока.Поездка;
	
	СтатусПоездки = ТекущаяСтрока.Статус;
	
	Если СтатусПоездки = "В пути" Тогда
		
		// Получаем последние координаты для поездки
		Координаты = ПолучитьПоследниеКоординатыПоездки(Поездка);
	
		#Если МобильноеПриложениеКлиент Тогда
			Если Координаты <> Неопределено Тогда
				Если ПоддерживаетсяОтображениеКарты() Тогда
					// Отображаем точку на карте
					ПоказатьНаКарте(Координаты);
				Иначе
					ПоказатьПредупреждение(, НСтр("ru='Отображение карты не поддерживается на устройстве!'"));
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(, НСтр("ru='Для выбранной поездки нет данных о местоположении!'"));
			КонецЕсли;
		#Иначе
			ПоказатьПредупреждение(, НСтр("ru='Функция доступна только в мобильном приложении!'"));
		#КонецЕсли
		
	Иначе 
		ПоказатьПредупреждение(, "Эта функция доступна, когда трамспорт в пути!");	
	КонецЕсли;
	
КонецПроцедуры

// Серверная процедура для получения последних координат
&НаСервереБезКонтекста
Функция ПолучитьПоследниеКоординатыПоездки(Поездка)
	// Запрос к регистру сведений для получения последней записи
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КоординатыПоездок.Координаты КАК Координаты
	|ИЗ
	|	РегистрСведений.КоординатыПоездок КАК КоординатыПоездок
	|ГДЕ
	|	КоординатыПоездок.Поездка = &Поездка
	|УПОРЯДОЧИТЬ ПО
	|	КоординатыПоездок.ВремяГеопозиции УБЫВ";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	// Извлекаем координаты из хранилища значения
	Возврат Выборка.Координаты.Получить();
КонецФункции

&НаКлиенте
Процедура ДатаВыбора2ПриИзменении(Элемент)
	ОбновитьДанныеНаФорме(ТекущийПользователь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьсяНаПоездку(Команда)
	
	СинхронизироватьНажатие();
	
	Если ВыполнитьПроверкуСети() Тогда 
		ЗаписьНаПоездкуБезПроверкиСети();	
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru='Нет сети, нет возможности зпаисаться на поездку!'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьНаПоездкуБезПроверкиСети()
	
	ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("Пользователь", ТекущийПользователь);
	ОткрытьФорму("ОбщаяФорма.ЗаписьНаПоездку", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоездкуБезПроверкиСети()
	
	ТекущиеДанные = Элементы.ЗаписанныеПоездки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите поездку!");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Статус <> "Поездка не началась" Тогда
    	ПоказатьПредупреждение(, "Статус поездки должен быть в статусе поездка не началась!");
    	Возврат;
	КонецЕсли;
	
	// Передача параметров в форму ВыборОстановок
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поездка", ТекущиеДанные.Поездка);
	ПараметрыФормы.Вставить("Пользователь", ТекущийПользователь);
	
	ОткрытьФорму("ОбщаяФорма.ВыборОтменитьПоездку", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверкуСети()
	Возврат СервисАвторизации.ПроверитьСвязьССервером();
КонецФункции

&НаКлиенте
Процедура ОтменитьПоездку(Команда)
	СинхронизироватьНажатие();
		
	Если ВыполнитьПроверкуСети() Тогда 
		ОтменитьПоездкуБезПроверкиСети();	
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru='Нет сети, нет возможности отменить поездку!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьМаршрут(Команда)
	
	СинхронизироватьНажатие();
	ТекущаяСтрока = Элементы.ЗаписанныеПоездки.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите поездку в таблице!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ДоступноПодключениеКИнтернету() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нет интернет соединения!'"));
		Возврат;
	КонецЕсли;
	
	Поездка = ТекущаяСтрока.Поездка;
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = СобратьДанныеМаршрута(Поездка, ТекущийПользователь);
		
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() < 2 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Для выбранной поездки нет данных маршрута!'"));
			Возврат;
		КонецЕсли;
		
		// Формируем URL и начальный адрес для Google Maps
		РезультатURL = СоздатьURLМаршрута(ДанныеМаршрута);
		URL = РезультатURL.URL;
		НачальныйАдрес = РезультатURL.Начало;
		
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удалось построить маршрут: недостаточно точек!'"));
			Возврат;
		КонецЕсли;
		
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
			ТекстСообщения = "Карта запущена успешно!";
			ПоказатьПредупреждение(, НСтр("ru='" + ТекстСообщения + "'"));
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Ошибка запуска Google Maps: '") + ОписаниеОшибки();
			Сообщение.Сообщить();
			// Альтернативный запуск через geo:
			Попытка
				АльтернативныйURL = "geo:0,0?q=" + НачальныйАдрес;
				Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", АльтернативныйURL);
				Запуск.Запустить(Ложь);
				ПоказатьПредупреждение(, НСтр("ru='Запущен альтернативный geo URL: '") + АльтернативныйURL);
			Исключение
				ПоказатьПредупреждение(, НСтр("ru='Ошибка запуска карты: '") + ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Функция СобратьДанныеМаршрута(Поездка, ТекущийПользователь)
	// Запрос для получения остановок посадки, высадки и маршрута
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаЗабронированныеМеста.ОстановкаПосадки КАК ОстановкаПосадки,
		|	ПоездкаЗабронированныеМеста.ОстановкаВысадки КАК ОстановкаВысадки
		|ПОМЕСТИТЬ Бронь
		|ИЗ
		|	Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
		|ГДЕ
		|	ПоездкаЗабронированныеМеста.Ссылка = &Поездка
		|	И ПоездкаЗабронированныеМеста.Пассажир = &ТекущийПользователь
		|	И ПоездкаЗабронированныеМеста.БроньОтменена = ЛОЖЬ
		|;
		|
		|ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Адрес КАК Адрес,
		|	ПоездкаМаршрутПоездки.Время КАК Время,
		|	ПоездкаМаршрутПоездки.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ПоездкаМаршрутПоездки.Адрес = Бронь.ОстановкаПосадки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПосадка,
		|	ВЫБОР
		|		КОГДА ПоездкаМаршрутПоездки.Адрес = Бронь.ОстановкаВысадки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВысадка
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Бронь КАК Бронь
		|		ПО ИСТИНА
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка = &Поездка";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем массив адресов
	ДанныеМаршрута = Новый Массив;
	Выборка = Результат.Выбрать();
	
	ВремяПосадки = Дата(1,1,1);
	ОстановкаПосадки = Неопределено;
	ОстановкаВысадки = Неопределено;
	ВключатьТочки = Ложь;
	
	// Находим время посадки и остановки
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоПосадка Тогда
			ВремяПосадки = Выборка.Время;
			ОстановкаПосадки = Выборка.Адрес;
		КонецЕсли;
		Если Выборка.ЭтоВысадка Тогда
			ОстановкаВысадки = Выборка.Адрес;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка наличия брони
	Если ОстановкаПосадки = Неопределено ИЛИ ОстановкаВысадки = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Вы не записаны на эту поездку или остановки не найдены!'");
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем маршрут
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		// Начинаем с остановки посадки
		Если Выборка.Адрес = ОстановкаПосадки Тогда
			ВключатьТочки = Истина;
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);
		// Промежуточные точки
		ИначеЕсли ВключатьТочки И Выборка.Время > ВремяПосадки И Выборка.Адрес <> ОстановкаВысадки Тогда
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);

		// Остановка высадки
		ИначеЕсли Выборка.Адрес = ОстановкаВысадки Тогда
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);
			ВключатьТочки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка маршрута
	Если ДанныеМаршрута.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеМаршрута;
КонецФункции

&НаСервереБезКонтекста
Функция ИзвлечьСтруктуруАдреса(АдресСсылка)
	// Получение данных адреса из справочника
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Адреса.Страна,
		|	Адреса.Регион,
		|	Адреса.Город,
		|	Адреса.Улица,
		|	Адреса.Дом,
		|	Адреса.Индекс
		|ИЗ
		|	Справочник.Адреса КАК Адреса
		|ГДЕ
		|	Адреса.Ссылка = &Адрес";
	
	Запрос.УстановитьПараметр("Адрес", АдресСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверяем обязательность поля Город
	Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Страна", ?(ЗначениеЗаполнено(Выборка.Страна), Выборка.Страна, ""));
	СтруктураАдреса.Вставить("Регион", ?(ЗначениеЗаполнено(Выборка.Регион), Выборка.Регион, ""));
	СтруктураАдреса.Вставить("Город", Выборка.Город);
	СтруктураАдреса.Вставить("Улица", ?(ЗначениеЗаполнено(Выборка.Улица), Выборка.Улица, ""));
	СтруктураАдреса.Вставить("Дом", ?(ЗначениеЗаполнено(Выборка.Дом), Выборка.Дом, ""));
	СтруктураАдреса.Вставить("Индекс", ?(ЗначениеЗаполнено(Выборка.Индекс), Выборка.Индекс, ""));
	
	Возврат СтруктураАдреса;
КонецФункции

&НаКлиенте
Функция СоздатьURLМаршрута(ДанныеМаршрута)
	// Проверяем, есть ли минимум две точки для маршрута
	Результат = Новый Структура("URL, Начало", "", "");
	
	Если ДанныеМаршрута.Количество() < 2 Тогда
		ПоказатьПредупреждение(, НСтр("ru='" + "Недостаточно точек для маршрута!" + "'"));
		Возврат Результат;
	КонецЕсли;
	
	// Формируем начальную точку
	ПервыйАдрес = ДанныеМаршрута[0];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Дом);
	КонецЕсли;
	Начало = СтрСоединить(ЧастиАдреса, ", ");
	Результат.Начало = Начало;
	Начало = СтрЗаменить(Начало, " ", "+");
	
	// Формируем конечную точку
	ПоследнийАдрес = ДанныеМаршрута[ДанныеМаршрута.Количество() - 1];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Дом);
	КонецЕсли;
	Конец = СтрСоединить(ЧастиАдреса, ", ");
	Конец = СтрЗаменить(Конец, " ", "+");
	
	// Формируем промежуточные точки
	ПромежуточныеТочки = "";
	Для Индекс = 1 По ДанныеМаршрута.Количество() - 2 Цикл
		Адрес = ДанныеМаршрута[Индекс];
		ЧастиАдреса = Новый Массив;
		Если ЗначениеЗаполнено(Адрес.Индекс) Тогда
			ЧастиАдреса.Добавить(Адрес.Индекс);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Город) Тогда
			ЧастиАдреса.Добавить(Адрес.Город);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Улица) Тогда
			ЧастиАдреса.Добавить(Адрес.Улица);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Дом) Тогда
			ЧастиАдреса.Добавить(Адрес.Дом);
		КонецЕсли;
		Точка = СтрСоединить(ЧастиАдреса, ", ");
		Точка = СтрЗаменить(Точка, " ", "+");
		ПромежуточныеТочки = ПромежуточныеТочки + "/" + Точка;

	КонецЦикла;
	
	// Формируем URL
	URL = "https://www.google.com/maps/dir/" + Начало + "/" + Конец + ПромежуточныеТочки;
	Результат.URL = URL;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура РасширеннаяИнформация(Команда)
	ТекущаяСтрока = Элементы.ЗаписанныеПоездки.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите поездку!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поездка", ТекущаяСтрока.Поездка);
	ПараметрыФормы.Вставить("Статус", ТекущаяСтрока.Статус);
	ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
	
	ОткрытьФорму("ОбщаяФорма.РасширеннаяИнформацияПоездкиЗабронированной", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Асинх Процедура СоздатьНапоминаниеНажатие(Элемент)
    #Если МобильноеПриложениеКлиент Тогда
        // Проверяем, выбрана ли строка
        ТекущаяСтрока = Элементы.ЗаписанныеПоездки.ТекущиеДанные;
        
        Если ТекущаяСтрока = Неопределено Тогда
            ПоказатьПредупреждение(Неопределено, НСтр("ru='Выберите поездку!'"));
            Возврат;
		КонецЕсли;
		
		Если ТекущаяСтрока.Статус = "В пути" Тогда
            ПоказатьПредупреждение(Неопределено, НСтр("ru='Поездка уже началась!'"));
            Возврат;
        КонецЕсли;
   
        Попытка
            ДатаУведомления = Ждать ВвестиДатуАсинх(ТекущаяДата(), "Введите дату и время уведомления", ЧастиДаты.ДатаВремя);
			
			// Проверка 1: Дата уведомления не должна быть меньше текущей
        	ТекущаяДатаВремя = ТекущаяДата();
        	Если ДатаУведомления < ТекущаяДатаВремя Тогда
            	ПоказатьПредупреждение(Неопределено, НСтр("ru='Дата уведомления не может быть меньше текущей даты и времени!'"));
            	Возврат;
        	КонецЕсли;
        
        	// Проверка 2: Разница между текущей датой и датой уведомления минимум 5 минут
        	РазницаВСекундах = ДатаУведомления - ТекущаяДатаВремя;
        	Если РазницаВСекундах < 300 Тогда // 300 секунд = 5 минут
            	ПоказатьПредупреждение(Неопределено, НСтр("ru='Дата уведомления должна быть минимум на 5 минут позже текущей даты!'"));
            	Возврат;
        	КонецЕсли;
        
        	// Проверка 3: Дата уведомления не должна быть больше даты поездки
        	ДатаПоездки = ПолучитьДатуПоездкиИзДокумента(ТекущаяСтрока.Поездка);
        	ВремяПосадки = ПолучитьВремяОстановкиПосадки(ТекущаяСтрока.Поездка);
        	Если ДатаПоездки = Дата(1,1,1) Или ВремяПосадки = Дата(1,1,1) Тогда
            	ПоказатьПредупреждение(Неопределено, НСтр("ru='Не удалось определить дату или время поездки!'"));
            	Возврат;
        	КонецЕсли;
            
            Уведомление = Новый ДоставляемоеУведомление;
            Уведомление.Заголовок = "Запланирована поездка";
			Уведомление.Текст = ПолучитьСообщениеОПоездке(ПолучитьДатуПоездкиИзДокумента(ТекущаяСтрока.Поездка), ПолучитьВремяОстановкиПосадки(ТекущаяСтрока.Поездка));
            Уведомление.ДатаПоявленияУниверсальноеВремя = ДатаОтправки(ДатаУведомления);
			Уведомление.Данные = "Trip_" + Строка(ТекущаяСтрока.Поездка.УникальныйИдентификатор()) + "_" + Формат(ДатаУведомления, "ДФ=yyyyMMddHHmmss");
            
            ДоставляемыеУведомления.ДобавитьЛокальноеУведомление(Уведомление);
			СоздатьЗаписьЛокальногоУведомления(ТекущийПользователь, Уведомление.Данные, ТекущаяСтрока.Поездка);
            
        Исключение
			ПоказатьПредупреждение(, НСтр("ru='" + "Ошибка при создании напоминания: " + ОписаниеОшибки() + "'"));
        КонецПопытки
    #Иначе
		ПоказатьПредупреждение(, НСтр("ru='" + "Работа с уведомлениями не поддерживается в данном контексте!" + "'"));
    #КонецЕсли
КонецПроцедуры

&НаСервере
Функция ДатаОтправки(ДатаУведомления)
    РазницаДат = ДатаУведомления - ТекущаяДата();
    Возврат ТекущаяУниверсальнаяДата() + РазницаДат;
КонецФункции

&НаСервере
Функция ПолучитьДатуПоездкиИзДокумента(Поездка)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Поездка.ДатаПоездки КАК ДатаПоездки
        |ИЗ
        |   Документ.Поездка КАК Поездка
        |ГДЕ
        |   Поездка.Ссылка = &Поездка";
    
    Запрос.УстановитьПараметр("Поездка", Поездка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Дата(1,1,1); // Пустая дата вместо исключения
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    Возврат Выборка.ДатаПоездки;
КонецФункции

&НаСервере
Функция ПолучитьВремяОстановкиПосадки(Поездка)
    // Шаг 1: Находим адрес остановки посадки для текущего пользователя
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПоездкаЗабронированныеМеста.ОстановкаПосадки КАК ОстановкаПосадки
        |ИЗ
        |   Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
        |ГДЕ
        |   ПоездкаЗабронированныеМеста.Ссылка = &Поездка
        |   И ПоездкаЗабронированныеМеста.Пассажир = &ТекущийПользователь";
    
    Запрос.УстановитьПараметр("Поездка", Поездка);
    Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Дата(1,1,1); // Пустая дата, если адрес не найден
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    ОстановкаПосадки = Выборка.ОстановкаПосадки;
    
    // Шаг 2: Находим время для адреса остановки посадки
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПоездкаМаршрутПоездки.Время КАК Время
        |ИЗ
        |   Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
        |ГДЕ
        |   ПоездкаМаршрутПоездки.Ссылка = &Поездка
        |   И ПоездкаМаршрутПоездки.Адрес = &ОстановкаПосадки";
    
    Запрос.УстановитьПараметр("Поездка", Поездка);
    Запрос.УстановитьПараметр("ОстановкаПосадки", ОстановкаПосадки);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Дата(1,1,1); // Пустая дата вместо исключения
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    Возврат Выборка.Время;
КонецФункции

&НаСервере
Функция ПолучитьСообщениеОПоездке(ДатаПоездки, ВремяПосадки)
    // Объединяем дату поездки и время посадки
    ДатаВремяПосадки = Дата(Год(ДатаПоездки), Месяц(ДатаПоездки), День(ДатаПоездки),
                            Час(ВремяПосадки), Минута(ВремяПосадки), Секунда(ВремяПосадки));
    
    // Форматируем дату и время в строку
    ФорматированнаяДата = Формат(ДатаВремяПосадки, "ДЛФ=DT");
    
    // Формируем локализованное сообщение
    Сообщение = НСтр("ru='У вас запланирована поездка на %1'");
    Сообщение = СтрШаблон(Сообщение, ФорматированнаяДата);
    
    Возврат Сообщение;
КонецФункции

&НаСервере
Процедура СоздатьЗаписьЛокальногоУведомления(Пассажир, ИдентификаторУведомления, Поездка)
    НовыйЭлемент = Справочники.ЛокальныеУведомления.СоздатьЭлемент();
    НовыйЭлемент.Пассажир = Пассажир;
    НовыйЭлемент.ИдентификаторУведомления = ИдентификаторУведомления;
    НовыйЭлемент.Поездка = Поездка;
	НовыйЭлемент.Наименование = "Пользователь_" + Пассажир;
    
    Попытка
        НовыйЭлемент.Записать();
    Исключение
        Сообщить("Ошибка при записи в справочник ЛокальныеУведомления: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры