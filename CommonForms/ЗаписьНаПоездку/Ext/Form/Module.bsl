
// Команда Записаться
&НаКлиенте
Процедура ЗаписатьсяНаПоездку(Команда)
	
	СинхронизироватьНажатие();
	ТекущиеДанные = Элементы.ДоступныеПоездки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите поездку!");
		Возврат;
	КонецЕсли;
	
	// Передача параметров в форму ВыборОстановок
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поездка", ТекущиеДанные.Поездка);
	ПараметрыФормы.Вставить("Пользователь", ТекущийПользователь);
	
	ОткрытьФорму("ОбщаяФорма.ВыборОстановок", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяИнформация(Команда)
	ТекущаяСтрока = Элементы.ДоступныеПоездки.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите поездку!'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поездка", ТекущаяСтрока.Поездка);
	ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
	
	ОткрытьФорму("ОбщаяФорма.РасширеннаяИнформацияПоездки", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

// При создании формы на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Пользователь") Тогда
        ТекущийПользователь = Параметры.Пользователь;
	КонецЕсли;
	
    // Установка текущей даты по умолчанию
    Если Не ЗначениеЗаполнено(ДатаВыбораЗначения) Тогда
       ДатаВыбораЗначения = НачалоДня(ТекущаяДатаСеанса());
    КонецЕсли;
   
    Элементы.ДатаВыбора.Видимость = Истина;


	// Заполнение таблицы доступных поездок
	ЗаполнитьДоступныеПоездки();
КонецПроцедуры

// Обработчик оповещения в главной форме
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
    Если ИмяСобытия = "ОбновитьТаблицуЗаписей" Тогда
        // Перечитываем данные и обновляем таблицу для текущего пользователя
        ЗаполнитьДоступныеПоездки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеПоездки()
	ДоступныеПоездки.Очистить();
	
	// Запрос к документу Поездка
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Ссылка КАК Ссылка,
		|	МИНИМУМ(ПоездкаМаршрутПоездки.Время) КАК МинВремя,
		|	МАКСИМУМ(ПоездкаМаршрутПоездки.Время) КАК МаксВремя
		|ПОМЕСТИТЬ ВременнаяТаблицаВремен
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка.Проведен = ИСТИНА
		|	И ПоездкаМаршрутПоездки.Ссылка.ДатаПоездки >= &ДатаНачала
		|	И ПоездкаМаршрутПоездки.Ссылка.ДатаПоездки < &ДатаКонца
		|	И ПоездкаМаршрутПоездки.Ссылка.ПоездкаНачалась = ЛОЖЬ
		|СГРУППИРОВАТЬ ПО
		|	ПоездкаМаршрутПоездки.Ссылка
		|;
		|
		|ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Ссылка КАК Ссылка,
		|	ПоездкаМаршрутПоездки.Адрес.Наименование КАК АдресНачала
		|ПОМЕСТИТЬ НачальныеАдреса
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВремен КАК ВременнаяТаблицаВремен
		|	ПО ПоездкаМаршрутПоездки.Ссылка = ВременнаяТаблицаВремен.Ссылка
		|		И ПоездкаМаршрутПоездки.Время = ВременнаяТаблицаВремен.МинВремя
		|;
		|
		|ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Ссылка КАК Ссылка,
		|	ПоездкаМаршрутПоездки.Адрес.Наименование КАК АдресОкончания
		|ПОМЕСТИТЬ КонечныеАдреса
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаВремен КАК ВременнаяТаблицаВремен
		|	ПО ПоездкаМаршрутПоездки.Ссылка = ВременнаяТаблицаВремен.Ссылка
		|		И ПоездкаМаршрутПоездки.Время = ВременнаяТаблицаВремен.МаксВремя
		|;
		|
		|ВЫБРАТЬ
		|	Поездка.Ссылка КАК Поездка,
		|	Поездка.ДатаПоездки КАК ДатаПоездки,
		|	ЕСТЬNULL(НачальныеАдреса.АдресНачала, """") КАК АдресНачала,
		|	ЕСТЬNULL(КонечныеАдреса.АдресОкончания, """") КАК АдресОкончания,
		|	Поездка.КоличествоМест КАК КоличествоМест,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоездкаЗабронированныеМеста.Ссылка) КАК КоличествоЗанятыхМест
		|ИЗ
		|	Документ.Поездка КАК Поездка
		|	ЛЕВОЕ СОЕДИНЕНИЕ НачальныеАдреса КАК НачальныеАдреса
		|	ПО Поездка.Ссылка = НачальныеАдреса.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ КонечныеАдреса КАК КонечныеАдреса
		|	ПО Поездка.Ссылка = КонечныеАдреса.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
		|	ПО Поездка.Ссылка = ПоездкаЗабронированныеМеста.Ссылка
		|		И ПоездкаЗабронированныеМеста.БроньОтменена = ЛОЖЬ
		|ГДЕ
		|	Поездка.Проведен = ИСТИНА
		|	И Поездка.ДатаПоездки >= &ДатаНачала
		|	И Поездка.ДатаПоездки < &ДатаКонца
		|	И Поездка.ПоездкаНачалась = ЛОЖЬ
		|СГРУППИРОВАТЬ ПО
		|	Поездка.Ссылка,
		|	Поездка.ДатаПоездки,
		|	Поездка.КоличествоМест,
		|	ЕСТЬNULL(НачальныеАдреса.АдресНачала, """"),
		|	ЕСТЬNULL(КонечныеАдреса.АдресОкончания, """")
		|ИМЕЮЩИЕ
		|	Поездка.КоличествоМест > КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоездкаЗабронированныеМеста.Ссылка)";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаВыбораЗначения));
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(ДатаВыбораЗначения));
	
	// Выполнение запроса и заполнение таблицы
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДоступныеПоездки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		Элементы.ДекорацияНетПоездок.Видимость = Ложь;
		Элементы.ДоступныеПоездки.Видимость = Истина;
	Иначе
		Элементы.ДекорацияНетПоездок.Видимость = Истина;
		Элементы.ДоступныеПоездки.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

// Обработчик изменения даты
&НаКлиенте
Процедура ДатаВыбораПриИзменении(Элемент)
	// Обновление таблицы при изменении даты
	ЗаполнитьДоступныеПоездки();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоездку(Команда)
	СинхронизироватьНажатие();
	ТекущиеДанные = Элементы.ДоступныеПоездки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите поездку!");
		Возврат;
	КонецЕсли;
	
	// Передача параметров в форму ВыборОстановок
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поездка", ТекущиеДанные.Поездка);
	ПараметрыФормы.Вставить("Пользователь", ТекущийПользователь);
	
	ОткрытьФорму("ОбщаяФорма.ВыборОтменитьПоездку", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

Процедура СинхронизироватьНажатие()
    MobileSync.СинхронизироватьДанныеНажатие();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМаршрут(Команда)
	
	СинхронизироватьНажатие();
	ТекущаяСтрока = "";
	
	ТекущаяСтрока = Элементы.ДоступныеПоездки.ТекущиеДанные;
		
	Если ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, "Выберите поездку в таблице!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ДоступноПодключениеКИнтернету() Тогда
		ПоказатьПредупреждение(, "Нет интернет соединения!");
		Возврат;
	КонецЕсли;

	Поездка = ТекущаяСтрока.Поездка;
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		// Получаем текущее местоположение устройства
		ТекущееМестоположение = ПолучитьТекущееМестоположение();
		
		// Формируем URL для Google Maps
		URL = СформироватьURLМаршрута(ДанныеМаршрута, ТекущееМестоположение);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Ошибка запуска приложения карт!");
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов показываем маршрут без местоположения
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		URL = СформироватьURLМаршрута(ДанныеМаршрута);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
		
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты!");
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступноПодключениеКИнтернету()
	Возврат СервисАвторизации.ПроверитьСвязьССервером();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрута(Поездка)
	// Запрос к табличной части МаршрутПоездки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоездкаМаршрутПоездки.Адрес.Страна КАК Страна,
	|	ПоездкаМаршрутПоездки.Адрес.Регион КАК Регион,
	|	ПоездкаМаршрутПоездки.Адрес.Город КАК Город,
	|	ПоездкаМаршрутПоездки.Адрес.Улица КАК Улица,
	|	ПоездкаМаршрутПоездки.Адрес.Дом КАК Дом,
	|	ПоездкаМаршрутПоездки.Адрес.Индекс КАК Индекс,
	|	ПоездкаМаршрутПоездки.Время КАК Время
	|ИЗ
	|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
	|ГДЕ
	|	ПоездкаМаршрутПоездки.Ссылка = &Поездка
	|УПОРЯДОЧИТЬ ПО
	|	ПоездкаМаршрутПоездки.Время";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем массив адресов
	ДанныеМаршрута = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		// Проверяем обязательность поля Город
		Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Страна", Выборка.Страна);
		СтруктураАдреса.Вставить("Регион", Выборка.Регион);
		СтруктураАдреса.Вставить("Город", Выборка.Город);
		СтруктураАдреса.Вставить("Улица", Выборка.Улица);
		СтруктураАдреса.Вставить("Дом", Выборка.Дом);
		СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
		СтруктураАдреса.Вставить("Время", Выборка.Время);
		ДанныеМаршрута.Добавить(СтруктураАдреса);
	КонецЦикла;
	
	Возврат ?(ДанныеМаршрута.Количество() > 0, ДанныеМаршрута, Неопределено);
КонецФункции

&НаКлиенте
Функция СформироватьURLМаршрута(ДанныеМаршрута, ТекущееМестоположение = Неопределено)
	// Проверяем, есть ли минимум два адреса для маршрута
	Если ДанныеМаршрута.Количество() < 2 Тогда
		Возврат "";
	КонецЕсли;
	
	// Формируем начальную точку
	ПервыйАдрес = ДанныеМаршрута[0];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Страна) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Страна);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Регион) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Дом);
	КонецЕсли;
	Начало = СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	
	// Формируем конечную точку
	ПоследнийАдрес = ДанныеМаршрута[ДанныеМаршрута.Количество() - 1];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Страна) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Страна);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Регион) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Дом);
	КонецЕсли;
	Конец = СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	
	// Формируем промежуточные точки (если есть)
	ПромежуточныеТочки = "";
	Для Индекс = 1 По ДанныеМаршрута.Количество() - 2 Цикл
		Адрес = ДанныеМаршрута[Индекс];
		ЧастиАдреса = Новый Массив;
		Если ЗначениеЗаполнено(Адрес.Индекс) Тогда
			ЧастиАдреса.Добавить(Адрес.Индекс);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Страна) Тогда
			ЧастиАдреса.Добавить(Адрес.Страна);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Регион) Тогда
			ЧастиАдреса.Добавить(Адрес.Регион);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Город) Тогда
			ЧастиАдреса.Добавить(Адрес.Город);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Улица) Тогда
			ЧастиАдреса.Добавить(Адрес.Улица);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Дом) Тогда
			ЧастиАдреса.Добавить(Адрес.Дом);
		КонецЕсли;
		ПромежуточныеТочки = ПромежуточныеТочки + ?(ПромежуточныеТочки = "", "", "|") + 
			СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	КонецЦикла;
		
	Если ТекущееМестоположение <> Неопределено Тогда
	     Метка = Формат(ТекущееМестоположение.Широта, "ЧРД=.; ЧГ=0") + "," + Формат(ТекущееМестоположение.Долгота, "ЧРД=.; ЧГ=0");
	     URL = URL + "&q=" + Метка;
	КонецЕсли;

	
	// Формируем URL
	URL = "https://maps.google.com/maps?saddr=" + Начало + "&daddr=" + Конец;
	Если ПромежуточныеТочки <> "" Тогда
		URL = URL + "+to:" + ПромежуточныеТочки;
	КонецЕсли;
	
	Возврат URL;
КонецФункции

&НаКлиенте
Функция ПолучитьТекущееМестоположение()
	ТекущееМестоположение = Неопределено;
	
	#Если МобильноеПриложениеКлиент Тогда
		Провайдер = СредстваГеопозиционирования.ПолучитьСамогоЭнергоЭкономичногоПровайдера();
		Если Провайдер = Неопределено Тогда
			ПоказатьПредупреждение(, "Нет доступных провайдеров геолокации!");
			Возврат ТекущееМестоположение;
		КонецЕсли;
		
		Попытка
			Если СредстваГеопозиционирования.ОбновитьМестоположение(Провайдер.Имя, 60) Тогда
				ДанныеМестоположения = СредстваГеопозиционирования.ПолучитьПоследнееМестоположение(Провайдер.Имя);
				Если ДанныеМестоположения <> Неопределено Тогда
					Координаты = ДанныеМестоположения.Координаты;
					Если Координаты.Широта >= -90 И Координаты.Широта <= 90 И Координаты.Долгота >= -180 И Координаты.Долгота <= 180 Тогда
						ТекущееМестоположение = Новый Структура("Широта, Долгота", Координаты.Широта, Координаты.Долгота);
					Иначе
						ПоказатьПредупреждение(, "Некорректные координаты!");
					КонецЕсли;
				Иначе
					ПоказатьПредупреждение(, "Данные местоположения не получены!");
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(, "Не удалось обновить местоположение!");
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(, "Ошибка геолокации: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		ПоказатьПредупреждение(, "Геолокация недоступна в этом клиенте!");
	#КонецЕсли
	
	Возврат ТекущееМестоположение;
КонецФункции
