
// Обработчик нажатия кнопки "Войти"
&НаКлиенте
Процедура Войти(Команда)
	
	НачатьАутентификацию(Логин, Пароль);
		
КонецПроцедуры

&НаКлиенте
Процедура НачатьАутентификацию(ЛогинВход, ПарольВход)
	
	Если ПустаяСтрока(ЛогинВход) ИЛИ ПустаяСтрока(ПарольВход) Тогда
        ПоказатьПредупреждение(, "Заполните поля логина и пароля!");
        Возврат;
    КонецЕсли;

    // Получение URL из константы
    URLИзКонстанты = ПолучитьURLЦентральнойБазы();

    // Формирование параметров для серверной процедуры
    КодУзла = Строка(Новый УникальныйИдентификатор());
    НаименованиеУстройства = "Устройство " + ЛогинВход;
	
	СинхронизироватьНажатие();
	
	Если ВыполнитьПроверкуСети() Тогда 
		// Вызов серверной процедуры
    	Результат = ВыполнитьАвторизациюНаСервере(ЛогинВход, ПарольВход, URLИзКонстанты, КодУзла, НаименованиеУстройства);
		
    	Если НЕ Результат.Успех Тогда
        	ПоказатьПредупреждение(, "Неверный логин или пароль!");
        	Возврат;
		КонецЕсли;
		
		Закрыть();
		// Создаем структуру с параметрами
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Логин", ЛогинВход);
		ПараметрыФормы.Вставить("Пароль", ПарольВход);

		// Открываем форму с параметрами
		ОткрытьГлавнуюФорму(ПараметрыФормы);
    	// Успешный вход
    	ПоказатьПредупреждение(, "Вход успешен!");

	Иначе
		
		Если ПроверкаНаУстройстве(ЛогинВход, ПарольВход) Тогда
			Закрыть();
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Логин", ЛогинВход);
			ПараметрыФормы.Вставить("Пароль", ПарольВход);

			// Открываем форму с параметрами
			ОткрытьГлавнуюФорму(ПараметрыФормы);

			ПоказатьПредупреждение(, "Вход успешен!");
		Иначе 
			ПоказатьПредупреждение(, "Неверный логин или пароль!");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьГлавнуюФорму(ПараметрыФормы)
     ОткрытьФорму("ОбщаяФорма.ГлавнаяФорма", ПараметрыФормы);
КонецПроцедуры

&НаСервере
Функция ПроверкаНаУстройстве(ЛогинВведенный, ПарольВведенный)
	// Перебор пользователей
    Выборка = Справочники.Пользователи.Выбрать();
	Пока Выборка.Следующий() Цикл
			
           Если Не ПустаяСтрока(Выборка.Логин) И Не ПустаяСтрока(Выборка.Пароль) Тогда
               // Проверка хэша логина
               Если СервисАвторизации.ПроверитьПароль(Выборка.Логин, ЛогинВведенный) Тогда
                   // Проверка хэша пароля
                   Если СервисАвторизации.ПроверитьПароль(Выборка.Пароль, ПарольВведенный) Тогда
                       
                       Возврат Истина;
                   КонецЕсли;
               КонецЕсли;
           КонецЕсли;
	КонецЦикла;
	   
	Возврат Ложь;   
	
КонецФункции

// Выполняет обмен: получает данные, подтверждает получение. 
&НаСервере 
Функция ВыполнитьОбмен(URL, КодУзла) 
	Результат = Новый Структура("Успех, Ошибка", Ложь, ""); 
	Попытка Определения = Новый WSОпределения(URL); 
		Прокси = Новый WSПрокси(Определения, "http://192.168.0.21/auth", "AuthService", "AuthServiceSoap");

    РезультатПолучения = Прокси.ПолучитьДанныеДляУзла(КодУзла);
    Если ПустаяСтрока(РезультатПолучения) Тогда
        Результат.Ошибка = "Сервер вернул пустые данные";
        Возврат Результат;
    КонецЕсли;
        
    РезультатПодтверждения = Прокси.АвторизоватьПользователя(КодУзла);
    Если НЕ РезультатПодтверждения.Успех Тогда
        Результат.Ошибка = РезультатПодтверждения.Ошибка;
        Возврат Результат;
    КонецЕсли;
    
    Результат.Успех = Истина;
Исключение
    Результат.Ошибка = "Ошибка обмена данными: " + ОписаниеОшибки();
КонецПопытки;
Возврат Результат;

КонецФункции

// Получение URL из константы
&НаСервере
Функция ПолучитьURLЦентральнойБазы()
    Возврат Константы.АдресЦентральнойБазы.Получить();
КонецФункции

// Сохранение URL в константу
&НаСервере
Процедура СохранитьURLЦентральнойБазы(URL)
    Константы.АдресЦентральнойБазы.Установить(URL);
КонецПроцедуры

// Вызов серверной процедуры
&НаСервере
Функция ВыполнитьАвторизациюНаСервере(Логин, Пароль, URL, КодУзла, НаименованиеУстройства)
    Возврат СервисАвторизации.АвторизоватьПользователяНаСервере(Логин, Пароль, URL, КодУзла, НаименованиеУстройства);
КонецФункции

&НаСервере
Функция ВыполнитьПроверкуСети()
	Возврат СервисАвторизации.ПроверитьСвязьССервером();
КонецФункции

// Загрузка формы при открытии
&НаКлиенте
Процедура ПриОткрытии(Отказ)
    АдресЦентральнойБазы = ПолучитьURLЦентральнойБазы();
КонецПроцедуры

Процедура СинхронизироватьНажатие()
    MobileSync.СинхронизироватьДанныеНажатие();
КонецПроцедуры

Процедура СинхронизироватьПоездкиНажатие()
    MobileSync.СинхронизироватьПоездки();
КонецПроцедуры

Процедура ОтправитьИзмененияНажатие()
    MobileSync.ОтправитьИзменения();
КонецПроцедуры

&НаКлиенте
Процедура URL(Команда)
	ОткрытьФорму("ОбщаяФорма.ЗадатьУзелАдресБазыДанных")
КонецПроцедуры

// Генерация случайной соли
Функция ПолучитьСлучайнуюСоль()
    Генератор = Новый ГенераторСлучайныхЧисел;
    Соль = "";
    Для Сч = 1 По 16 Цикл // 16 байт соли
        Соль = Соль + Символ(Генератор.СлучайноеЧисло(33, 126));
    КонецЦикла;
    Возврат Соль;
КонецФункции

&НаКлиенте
Процедура Регистрация(Команда)
	ОткрытьФорму("ОбщаяФорма.Регистрация");
КонецПроцедуры

&НаКлиенте
Процедура СканироватьQRКод(Команда)
	#Если МобильноеПриложениеКлиент Тогда
		// Проверяем поддержку сканирования
		Попытка
			СканированиеПоддерживается = СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов();
		Исключение
			ПоказатьПредупреждение(, "Сканирование не поддерживается! Проверьте конфигурацию.");
			Возврат;
		КонецПопытки;
		
		Если НЕ СканированиеПоддерживается Тогда

			ПоказатьПредупреждение(, "Сканирование штрихкодов не поддерживается!");
			Возврат;
		КонецЕсли;
		
		// Запускаем сканирование QR-кода
		Попытка
			ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтотОбъект);
			ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияИнтерфейса", ЭтотОбъект);
			СредстваМультимедиа.ПоказатьСканированиеШтрихКодов(
				НСтр("ru='Наведите камеру на QR-код';en='Aim the camera at a QR code'"),
				ОбработчикСканирования,
				ОбработчикЗакрытия,
				ТипШтрихКода.QRCode
			);
		Исключение
			ПоказатьПредупреждение(, "Ошибка запуска сканера: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		ПоказатьПредупреждение(, "Сканирование QR-кода доступно только в мобильном приложении!");
	#КонецЕсли
КонецПроцедуры

// Обработчик результата сканирования QR-кода
&НаКлиенте
Процедура ОбработкаСканирования(Штрихкод, Результат, Сообщение, ДополнительныеПараметры) Экспорт
	#Если МобильноеПриложениеКлиент Тогда
		// Проверяем успешность сканирования
		Если НЕ Результат Тогда
			ТекстОшибки = НСтр("ru='Сканирование не удалось!'");
			ПоказатьПредупреждение(, ТекстОшибки);
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
			Возврат;
		КонецЕсли;
		
		// Проверяем, что данные QR-кода не пустые
		ДанныеQR = Штрихкод;
		Если НЕ ЗначениеЗаполнено(ДанныеQR) Тогда
			ТекстОшибки = НСтр("ru='QR-код пустой!'");
			ПоказатьПредупреждение(, ТекстОшибки);
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
			Возврат;
		КонецЕсли;
				
		// Парсим данные QR-кода (формат логин:пароль)
		Попытка
			Части = СтрРазделить(ДанныеQR, ":", Истина);
			Если Части.Количество() <> 2 Тогда
				ТекстОшибки = НСтр("ru='Неверный формат QR-кода! Ожидается логин:пароль.'");
				ПоказатьПредупреждение(, ТекстОшибки);
				СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
				Возврат;
			КонецЕсли;
			
			ЛогинQR = Части[0];
			ПарольQR = Части[1];
			
			// Проверяем, что логин и пароль не пустые
			Если НЕ ЗначениеЗаполнено(ЛогинQR) ИЛИ НЕ ЗначениеЗаполнено(ПарольQR) Тогда
				ТекстОшибки = НСтр("ru='Логин или пароль пустые!'");
				ПоказатьПредупреждение(, ТекстОшибки);
				СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
				Возврат;
			КонецЕсли;
									
			// Закрываем интерфейс сканирования
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
			
			НачатьАутентификацию(ЛогинQR, ПарольQR);
		Исключение
			ТекстОшибки = НСтр("ru='Ошибка обработки QR-кода: '") + ОписаниеОшибки();
			ПоказатьПредупреждение(, ТекстОшибки);
			СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		КонецПопытки;
	#Иначе
		ТекстОшибки = НСтр("ru='Сканирование QR-кода доступно только в мобильном приложении!'");
		ПоказатьПредупреждение(, ТекстОшибки);
	#КонецЕсли
КонецПроцедуры

// Обработчик закрытия интерфейса сканирования
&НаКлиенте
Процедура ОбработкаЗакрытияИнтерфейса(ДополнительныеПараметры) Экспорт
	#Если НЕ МобильноеПриложениеКлиент Тогда
		ПоказатьПредупреждение(, "Сканирование QR-кода доступно только в мобильном приложении!");
	#КонецЕсли
КонецПроцедуры