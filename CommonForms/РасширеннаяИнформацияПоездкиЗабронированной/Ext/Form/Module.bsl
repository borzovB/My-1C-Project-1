
&НаКлиенте
Процедура ПоказатьМаршрут(Команда)
	
	СинхронизироватьНажатие();
		
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		// Получаем текущее местоположение устройства
		ТекущееМестоположение = ПолучитьТекущееМестоположение();
		
		// Формируем URL для Google Maps
		URL = СформироватьURLМаршрута(ДанныеМаршрута, ТекущееМестоположение);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Ошибка запуска приложения карт: "  + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов показываем маршрут без местоположения
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		URL = СформироватьURLМаршрута(ДанныеМаршрута);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
				
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: "  + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступноПодключениеКИнтернету()
	Возврат СервисАвторизации.ПроверитьСвязьССервером();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрута(Поездка)
	// Запрос к табличной части МаршрутПоездки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоездкаМаршрутПоездки.Адрес.Страна КАК Страна,
	|	ПоездкаМаршрутПоездки.Адрес.Регион КАК Регион,
	|	ПоездкаМаршрутПоездки.Адрес.Город КАК Город,
	|	ПоездкаМаршрутПоездки.Адрес.Улица КАК Улица,
	|	ПоездкаМаршрутПоездки.Адрес.Дом КАК Дом,
	|	ПоездкаМаршрутПоездки.Адрес.Индекс КАК Индекс,
	|	ПоездкаМаршрутПоездки.Время КАК Время
	|ИЗ
	|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
	|ГДЕ
	|	ПоездкаМаршрутПоездки.Ссылка = &Поездка
	|УПОРЯДОЧИТЬ ПО
	|	ПоездкаМаршрутПоездки.Время";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем массив адресов
	ДанныеМаршрута = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		// Проверяем обязательность поля Город
		Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Страна", Выборка.Страна);
		СтруктураАдреса.Вставить("Регион", Выборка.Регион);
		СтруктураАдреса.Вставить("Город", Выборка.Город);
		СтруктураАдреса.Вставить("Улица", Выборка.Улица);
		СтруктураАдреса.Вставить("Дом", Выборка.Дом);
		СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
		СтруктураАдреса.Вставить("Время", Выборка.Время);
		ДанныеМаршрута.Добавить(СтруктураАдреса);
	КонецЦикла;
	
	Возврат ?(ДанныеМаршрута.Количество() > 0, ДанныеМаршрута, Неопределено);
КонецФункции

&НаКлиенте
Функция СформироватьURLМаршрута(ДанныеМаршрута, ТекущееМестоположение = Неопределено)
	// Проверяем, есть ли минимум два адреса для маршрута
	Если ДанныеМаршрута.Количество() < 2 Тогда
		Возврат "";
	КонецЕсли;
	
	// Формируем начальную точку
	ПервыйАдрес = ДанныеМаршрута[0];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Страна) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Страна);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Регион) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Дом);
	КонецЕсли;
	Начало = СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	
	// Формируем конечную точку
	ПоследнийАдрес = ДанныеМаршрута[ДанныеМаршрута.Количество() - 1];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Страна) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Страна);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Регион) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Дом);
	КонецЕсли;
	Конец = СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	
	// Формируем промежуточные точки (если есть)
	ПромежуточныеТочки = "";
	Для Индекс = 1 По ДанныеМаршрута.Количество() - 2 Цикл
		Адрес = ДанныеМаршрута[Индекс];
		ЧастиАдреса = Новый Массив;
		Если ЗначениеЗаполнено(Адрес.Индекс) Тогда
			ЧастиАдреса.Добавить(Адрес.Индекс);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Страна) Тогда
			ЧастиАдреса.Добавить(Адрес.Страна);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Регион) Тогда
			ЧастиАдреса.Добавить(Адрес.Регион);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Город) Тогда
			ЧастиАдреса.Добавить(Адрес.Город);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Улица) Тогда
			ЧастиАдреса.Добавить(Адрес.Улица);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Дом) Тогда
			ЧастиАдреса.Добавить(Адрес.Дом);
		КонецЕсли;
		ПромежуточныеТочки = ПромежуточныеТочки + ?(ПромежуточныеТочки = "", "", "|") + 
			СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	КонецЦикла;
		
	Если ТекущееМестоположение <> Неопределено Тогда
	     Метка = Формат(ТекущееМестоположение.Широта, "ЧРД=.; ЧГ=0") + "," + Формат(ТекущееМестоположение.Долгота, "ЧРД=.; ЧГ=0");
	     URL = URL + "&q=" + Метка;
	КонецЕсли;

	
	// Формируем URL
	URL = "https://maps.google.com/maps?saddr=" + Начало + "&daddr=" + Конец;
	Если ПромежуточныеТочки <> "" Тогда
		URL = URL + "+to:" + ПромежуточныеТочки;
	КонецЕсли;
	
	Возврат URL;
КонецФункции

&НаКлиенте
Функция ПолучитьТекущееМестоположение()
	ТекущееМестоположение = Неопределено;
	
	#Если МобильноеПриложениеКлиент Тогда
		Провайдер = СредстваГеопозиционирования.ПолучитьСамогоЭнергоЭкономичногоПровайдера();
		Если Провайдер = Неопределено Тогда
			ПоказатьПредупреждение(, "Нет доступных провайдеров геолокации!");
			Возврат ТекущееМестоположение;
		КонецЕсли;
		
		Попытка
			Если СредстваГеопозиционирования.ОбновитьМестоположение(Провайдер.Имя, 60) Тогда
				ДанныеМестоположения = СредстваГеопозиционирования.ПолучитьПоследнееМестоположение(Провайдер.Имя);
				Если ДанныеМестоположения <> Неопределено Тогда
					Координаты = ДанныеМестоположения.Координаты;
					Если Координаты.Широта >= -90 И Координаты.Широта <= 90 И Координаты.Долгота >= -180 И Координаты.Долгота <= 180 Тогда
						ТекущееМестоположение = Новый Структура("Широта, Долгота", Координаты.Широта, Координаты.Долгота);
					Иначе
						ПоказатьПредупреждение(, "Некорректные координаты!");
					КонецЕсли;
				Иначе
					ПоказатьПредупреждение(, "Данные местоположения не получены!");
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(, "Не удалось обновить местоположение!");
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(, "Ошибка геолокации: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		ПоказатьПредупреждение(, "Геолокация недоступна в этом клиенте!");
	#КонецЕсли
	
	Возврат ТекущееМестоположение;
КонецФункции

// Команда для показа маршрута от текущего местоположения до выбранного адреса
&НаКлиенте
Процедура ПоказатьМаршрутДоОстановки(Команда)
	
	СинхронизироватьНажатие();
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем текущую строку с адресом
		ТекущаяСтрока = Элементы.МаршрутПоездки.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			ПоказатьПредупреждение(, "Выберите адрес для построения маршрута!");
			Возврат;
		КонецЕсли;
		
		// Получаем данные адреса
		ДанныеАдреса = ПолучитьДанныеАдреса(ТекущаяСтрока.Адрес);
		Если ДанныеАдреса = Неопределено Тогда
			ПоказатьПредупреждение(, "Не удалось получить данные адреса!");
			Возврат;
		КонецЕсли;
		
		// Получаем текущее местоположение устройства
		ТекущееМестоположение = ПолучитьГеопозициюУстройства();
		Если ТекущееМестоположение = Неопределено Тогда
			ПоказатьПредупреждение(, "Не удалось определить текущее местоположение!");
			Возврат;
		КонецЕсли;
		
		// Формируем URL для Google Maps
		URL = СоздатьURLМаршрута(ДанныеАдреса, ТекущееМестоположение);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут!");
			Возврат;
		КонецЕсли;
				
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Ошибка запуска приложения карт: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов показываем маршрут без местоположения
		ТекущаяСтрока = Элементы.МаршрутПоездки.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Тогда
			ПоказатьПредупреждение(, "Выберите адрес для построения маршрута!");
			Возврат;
		КонецЕсли;
		
		ДанныеАдреса = ПолучитьДанныеАдреса(ТекущаяСтрока.Адрес);
		Если ДанныеАдреса = Неопределено Тогда
			ПоказатьПредупреждение(, "Не удалось получить данные адреса!");
			Возврат;
		КонецЕсли;
		
		URL = СоздатьURLМаршрута(ДанныеАдреса);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут!");
			Возврат;
		КонецЕсли;
				
		// Открываем URL в браузере
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
	
КонецПроцедуры

// Проверка подключения к интернету
&НаСервереБезКонтекста
Функция ПроверитьИнтернетСоединение()
	Возврат СервисАвторизации.ПроверитьСвязьССервером();
КонецФункции

// Получение данных адреса из справочника
&НаСервереБезКонтекста
Функция ПолучитьДанныеАдреса(АдресСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Адреса.Страна КАК Страна,
	|	Адреса.Регион КАК Регион,
	|	Адреса.Город КАК Город,
	|	Адреса.Улица КАК Улица,
	|	Адреса.Дом КАК Дом,
	|	Адреса.Индекс КАК Индекс
	|ИЗ
	|	Справочник.Адреса КАК Адреса
	|ГДЕ
	|	Адреса.Ссылка = &АдресСсылка";
	
	Запрос.УстановитьПараметр("АдресСсылка", АдресСсылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Страна", Выборка.Страна);
	СтруктураАдреса.Вставить("Регион", Выборка.Регион);
	СтруктураАдреса.Вставить("Город", Выборка.Город);
	СтруктураАдреса.Вставить("Улица", Выборка.Улица);
	СтруктураАдреса.Вставить("Дом", Выборка.Дом);
	СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Формирование URL для маршрута
&НаКлиенте
Функция СоздатьURLМаршрута(ДанныеАдреса, ТекущееМестоположение = Неопределено)
	
	// Формируем конечную точку
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеАдреса.Индекс) Тогда
		ЧастиАдреса.Добавить(ДанныеАдреса.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеАдреса.Страна) Тогда
		ЧастиАдреса.Добавить(ДанныеАдреса.Страна);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеАдреса.Регион) Тогда
		ЧастиАдреса.Добавить(ДанныеАдреса.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеАдреса.Город) Тогда
		ЧастиАдреса.Добавить(ДанныеАдреса.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеАдреса.Улица) Тогда
		ЧастиАдреса.Добавить(ДанныеАдреса.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеАдреса.Дом) Тогда
		ЧастиАдреса.Добавить(ДанныеАдреса.Дом);
	КонецЕсли;
	КонечныйАдрес = СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	
	// Формируем URL
	Если ТекущееМестоположение <> Неопределено Тогда
		Начало = Формат(ТекущееМестоположение.Широта, "ЧРД=.; ЧГ=0") + "," + Формат(ТекущееМестоположение.Долгота, "ЧРД=.; ЧГ=0");
		URL = "https://maps.google.com/maps?saddr=" + Начало + "&daddr=" + КонечныйАдрес;
	Иначе
		URL = "https://maps.google.com/maps?daddr=" + КонечныйАдрес;
	КонецЕсли;
	
	Возврат URL;
	
КонецФункции

// Получение текущей геопозиции устройства
&НаКлиенте
Функция ПолучитьГеопозициюУстройства()
	
	ТекущееМестоположение = Неопределено;
	
	#Если МобильноеПриложениеКлиент Тогда
		Провайдер = СредстваГеопозиционирования.ПолучитьСамогоЭнергоЭкономичногоПровайдера();
		Если Провайдер = Неопределено Тогда
			ПоказатьПредупреждение(, "Нет доступных провайдеров геолокации!");
			Возврат ТекущееМестоположение;
		КонецЕсли;
		
		Попытка
			Если СредстваГеопозиционирования.ОбновитьМестоположение(Провайдер.Имя, 60) Тогда
				ДанныеМестоположения = СредстваГеопозиционирования.ПолучитьПоследнееМестоположение(Провайдер.Имя);
				Если ДанныеМестоположения <> Неопределено Тогда
					Координаты = ДанныеМестоположения.Координаты;
					Если Координаты.Широта >= -90 И Координаты.Широта <= 90 И Координаты.Долгота >= -180 И Координаты.Долгота <= 180 Тогда
						ТекущееМестоположение = Новый Структура("Широта, Долгота", Координаты.Широта, Координаты.Долгота);
					Иначе
						ПоказатьПредупреждение(, "Некорректные координаты!");
					КонецЕсли;
				Иначе
					ПоказатьПредупреждение(, "Данные местоположения не получены!");
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(, "Не удалось обновить местоположение!");
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(, "Ошибка геолокации: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		ПоказатьПредупреждение(, "Геолокация недоступна в этом клиенте!");
	#КонецЕсли
	
	Возврат ТекущееМестоположение;
	
КонецФункции

// При создании формы на сервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем параметры
	Если Параметры.Свойство("Поездка") Тогда
		Поездка = Параметры.Поездка;
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущийПользователь") Тогда
		ТекущийПользователь = Параметры.ТекущийПользователь;
	Иначе
		ТекущийПользователь = "";
	КонецЕсли;
	
	Если Параметры.Свойство("Статус") Тогда
		Статус = Параметры.Статус;
	Иначе
		Статус = "";
	КонецЕсли;
	
	// Заполняем данные
	ЗаполнитьДанныеПоездки();
	
КонецПроцедуры

// Заполнение данных о поездке
&НаСервере
Процедура ЗаполнитьДанныеПоездки()
	
	// Запрос для получения данных
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Поездка.ДатаПоездки КАК ДатаПоездки,
		|	Поездка.КоличествоМест КАК КоличествоМест,
		|	Поездка.КоличествоЗанятыхМест КАК КоличествоЗанятыхМест,
		|	Поездка.ПоездкаНачалась КАК ПоездкаНачалась,
		|	Поездка.ПоездкаЗавершена КАК ПоездкаЗавершена,
		|	Поездка.МаршрутПоездки.(
		|		Адрес КАК Адрес,
		|		Адрес.Наименование КАК Наименование,
		|		Время КАК Время,
		|		Остановка КАК Остановка
		|	) КАК МаршрутПоездки
		|ИЗ
		|	Документ.Поездка КАК Поездка
		|ГДЕ
		|	Поездка.Ссылка = &Поездка";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	// Заполняем реквизиты
	ДатаПоездки = Выборка.ДатаПоездки;
	СвободныеМеста = Выборка.КоличествоМест - Выборка.КоличествоЗанятыхМест;
	СтатусПоездки = РассчитатьСтатус(Выборка.ПоездкаНачалась, Выборка.ПоездкаЗавершена);
	
	// Заполняем таблицу маршрута
	МаршрутПоездки.Очистить();
	ВыборкаМаршрута = Выборка.МаршрутПоездки.Выбрать();
	
	Пока ВыборкаМаршрута.Следующий() Цикл
		НоваяСтрока = МаршрутПоездки.Добавить();
		НоваяСтрока.Наименование = ?(ВыборкаМаршрута.Наименование = Неопределено, "", ВыборкаМаршрута.Наименование);
		НоваяСтрока.Адрес = ВыборкаМаршрута.Адрес;
		НоваяСтрока.Время = ВыборкаМаршрута.Время;
		НоваяСтрока.Остановка = ВыборкаМаршрута.Остановка;
	КонецЦикла;
	
КонецПроцедуры

// Расчёт статуса поездки
&НаСервере
Функция РассчитатьСтатус(ПоездкаНачалась, ПоездкаЗавершена)
	Если ПоездкаНачалась И ПоездкаЗавершена Тогда
		Возврат "Поездка завершена";
	ИначеЕсли ПоездкаНачалась И НЕ ПоездкаЗавершена Тогда
		Возврат "В пути";
	Иначе
		Возврат "Поездка не началась";
	КонецЕсли;
КонецФункции

// Команда закрытия формы
&НаКлиенте
Процедура ЗакрытьОкно(Команда)
	Закрыть();
КонецПроцедуры

Процедура СинхронизироватьНажатие()
    MobileSync.СинхронизироватьДанныеНажатие();
КонецПроцедуры

// Клиентская процедура для обработки нажатия кнопки
&НаКлиенте
Процедура ПоказатьНаКартеПоследнееМесто(Команда)
	СинхронизироватьНажатие();
	
	Если СтатусПоездки = "В пути" Тогда
		
		// Получаем последние координаты для поездки
		Координаты = ПолучитьПоследниеКоординатыПоездки(Поездка);
	
		#Если МобильноеПриложениеКлиент Тогда
			Если Координаты <> Неопределено Тогда
				Если ПоддерживаетсяОтображениеКарты() Тогда
					// Отображаем точку на карте
					ПоказатьНаКарте(Координаты);
				Иначе
					ПоказатьПредупреждение(, НСтр("ru='Отображение карты не поддерживается на устройстве!'"));
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(, НСтр("ru='Для выбранной поездки нет данных о местоположении!'"));
			КонецЕсли;
		#Иначе
			ПоказатьПредупреждение(, "Функция доступна только в мобильном приложении!");
		#КонецЕсли
		
	Иначе 
		ПоказатьПредупреждение(, "Эта функция доступна, когда трамспорт в пути!");	
	КонецЕсли;
	
КонецПроцедуры

// Серверная процедура для получения последних координат
&НаСервереБезКонтекста
Функция ПолучитьПоследниеКоординатыПоездки(Поездка)
	// Запрос к регистру сведений для получения последней записи
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КоординатыПоездок.Координаты КАК Координаты
	|ИЗ
	|	РегистрСведений.КоординатыПоездок КАК КоординатыПоездок
	|ГДЕ
	|	КоординатыПоездок.Поездка = &Поездка
	|УПОРЯДОЧИТЬ ПО
	|	КоординатыПоездок.ВремяГеопозиции УБЫВ";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	// Извлекаем координаты из хранилища значения
	Возврат Выборка.Координаты.Получить();
КонецФункции

&НаКлиенте
Процедура ОтобразитьМаршрут(Команда)
	
	СинхронизироватьНажатие();
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = СобратьДанныеМаршрута(Поездка, ТекущийПользователь);
		
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() < 2 Тогда
			ПоказатьПредупреждение(, НСтр("ru='Для выбранной поездки нет данных маршрута!'"));
			Возврат;
		КонецЕсли;
		
		// Формируем URL и начальный адрес для Google Maps
		РезультатURL = СоздатьURL(ДанныеМаршрута);
		URL = РезультатURL.URL;
		НачальныйАдрес = РезультатURL.Начало;
		
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удалось построить маршрут: недостаточно точек!'"));
			Возврат;
		КонецЕсли;
		
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
			ПоказатьПредупреждение(, НСтр("ru='Карта запущена успешно!'"));
		Исключение
			
			ТекстОшибки = НСтр("ru='Ошибка запуска Google Maps: '") + ОписаниеОшибки();
            ПоказатьПредупреждение(, ТекстОшибки);
			
			// Альтернативный запуск через geo:
			Попытка
				АльтернативныйURL = "geo:0,0?q=" + НачальныйАдрес;
				Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", АльтернативныйURL);
				Запуск.Запустить(Ложь);
        		ТекстСообщения = НСтр("ru='Запущен альтернативный geo URL: '") + АльтернативныйURL;
        		ПоказатьПредупреждение(, ТекстСообщения);
			Исключение
				ПоказатьПредупреждение(, НСтр("ru='Ошибка запуска карты: '") + ОписаниеОшибки());
			КонецПопытки;
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

&НаСервереБезКонтекста
Функция СобратьДанныеМаршрута(Поездка, ТекущийПользователь)
	// Запрос для получения остановок посадки, высадки и маршрута
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоездкаЗабронированныеМеста.ОстановкаПосадки КАК ОстановкаПосадки,
		|	ПоездкаЗабронированныеМеста.ОстановкаВысадки КАК ОстановкаВысадки
		|ПОМЕСТИТЬ Бронь
		|ИЗ
		|	Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
		|ГДЕ
		|	ПоездкаЗабронированныеМеста.Ссылка = &Поездка
		|	И ПоездкаЗабронированныеМеста.Пассажир = &ТекущийПользователь
		|	И ПоездкаЗабронированныеМеста.БроньОтменена = ЛОЖЬ
		|;
		|
		|ВЫБРАТЬ
		|	ПоездкаМаршрутПоездки.Адрес КАК Адрес,
		|	ПоездкаМаршрутПоездки.Время КАК Время,
		|	ПоездкаМаршрутПоездки.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ПоездкаМаршрутПоездки.Адрес = Бронь.ОстановкаПосадки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПосадка,
		|	ВЫБОР
		|		КОГДА ПоездкаМаршрутПоездки.Адрес = Бронь.ОстановкаВысадки
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВысадка
		|ИЗ
		|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Бронь КАК Бронь
		|		ПО ИСТИНА
		|ГДЕ
		|	ПоездкаМаршрутПоездки.Ссылка = &Поездка";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем массив адресов
	ДанныеМаршрута = Новый Массив;
	Выборка = Результат.Выбрать();
	
	ВремяПосадки = Дата(1,1,1);
	ОстановкаПосадки = Неопределено;
	ОстановкаВысадки = Неопределено;
	ВключатьТочки = Ложь;
	
	// Находим время посадки и остановки
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоПосадка Тогда
			ВремяПосадки = Выборка.Время;
			ОстановкаПосадки = Выборка.Адрес;
		КонецЕсли;
		Если Выборка.ЭтоВысадка Тогда
			ОстановкаВысадки = Выборка.Адрес;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка наличия брони
	Если ОстановкаПосадки = Неопределено ИЛИ ОстановкаВысадки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем маршрут
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		// Начинаем с остановки посадки
		Если Выборка.Адрес = ОстановкаПосадки Тогда
			ВключатьТочки = Истина;
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);
		// Промежуточные точки
		ИначеЕсли ВключатьТочки И Выборка.Время > ВремяПосадки И Выборка.Адрес <> ОстановкаВысадки Тогда
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);

		// Остановка высадки
		ИначеЕсли Выборка.Адрес = ОстановкаВысадки Тогда
			СтруктураАдреса = ИзвлечьСтруктуруАдреса(Выборка.Адрес);
			Если СтруктураАдреса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеМаршрута.Добавить(СтруктураАдреса);
			ВключатьТочки = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка маршрута
	Если ДанныеМаршрута.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеМаршрута;
КонецФункции

&НаСервереБезКонтекста
Функция ИзвлечьСтруктуруАдреса(АдресСсылка)
	// Получение данных адреса из справочника
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Адреса.Страна,
		|	Адреса.Регион,
		|	Адреса.Город,
		|	Адреса.Улица,
		|	Адреса.Дом,
		|	Адреса.Индекс
		|ИЗ
		|	Справочник.Адреса КАК Адреса
		|ГДЕ
		|	Адреса.Ссылка = &Адрес";
	
	Запрос.УстановитьПараметр("Адрес", АдресСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверяем обязательность поля Город
	Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Страна", ?(ЗначениеЗаполнено(Выборка.Страна), Выборка.Страна, ""));
	СтруктураАдреса.Вставить("Регион", ?(ЗначениеЗаполнено(Выборка.Регион), Выборка.Регион, ""));
	СтруктураАдреса.Вставить("Город", Выборка.Город);
	СтруктураАдреса.Вставить("Улица", ?(ЗначениеЗаполнено(Выборка.Улица), Выборка.Улица, ""));
	СтруктураАдреса.Вставить("Дом", ?(ЗначениеЗаполнено(Выборка.Дом), Выборка.Дом, ""));
	СтруктураАдреса.Вставить("Индекс", ?(ЗначениеЗаполнено(Выборка.Индекс), Выборка.Индекс, ""));
	
	Возврат СтруктураАдреса;
КонецФункции

&НаКлиенте
Функция СоздатьURL(ДанныеМаршрута)
	// Проверяем, есть ли минимум две точки для маршрута
	Результат = Новый Структура("URL, Начало", "", "");
	
	Если ДанныеМаршрута.Количество() < 2 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Формируем начальную точку
	ПервыйАдрес = ДанныеМаршрута[0];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Дом);
	КонецЕсли;
	Начало = СтрСоединить(ЧастиАдреса, ", ");
	Результат.Начало = Начало;
	Начало = СтрЗаменить(Начало, " ", "+");	
	// Формируем конечную точку
	ПоследнийАдрес = ДанныеМаршрута[ДанныеМаршрута.Количество() - 1];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Дом);
	КонецЕсли;
	Конец = СтрСоединить(ЧастиАдреса, ", ");
	Конец = СтрЗаменить(Конец, " ", "+");
	
	// Формируем промежуточные точки
	ПромежуточныеТочки = "";
	Для Индекс = 1 По ДанныеМаршрута.Количество() - 2 Цикл
		Адрес = ДанныеМаршрута[Индекс];
		ЧастиАдреса = Новый Массив;
		Если ЗначениеЗаполнено(Адрес.Индекс) Тогда
			ЧастиАдреса.Добавить(Адрес.Индекс);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Город) Тогда
			ЧастиАдреса.Добавить(Адрес.Город);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Улица) Тогда
			ЧастиАдреса.Добавить(Адрес.Улица);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Дом) Тогда
			ЧастиАдреса.Добавить(Адрес.Дом);
		КонецЕсли;
		Точка = СтрСоединить(ЧастиАдреса, ", ");
		Точка = СтрЗаменить(Точка, " ", "+");
		ПромежуточныеТочки = ПромежуточныеТочки + "/" + Точка;
	КонецЦикла;
	
	// Формируем URL
	URL = "https://www.google.com/maps/dir/" + Начало + "/" + Конец + ПромежуточныеТочки;
	Результат.URL = URL;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОтменитьПоездку(Команда)
	СинхронизироватьНажатие();
		
	Если ВыполнитьПроверкуСети() Тогда 
		ОтменитьПоездкуБезПроверкиСети();	
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru='Нет сети, нет возможности отменить поездку!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоездкуБезПроверкиСети()
		
	Если СтатусПоездки <> "Поездка не началась" Тогда
    	ПоказатьПредупреждение(, "Статус поездки должен быть в статусе поездка не началась!");
    	Возврат;
	КонецЕсли;
	
	// Передача параметров в форму ВыборОстановок
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Поездка", Поездка);
	ПараметрыФормы.Вставить("Пользователь", ТекущийПользователь);
	
	ОткрытьФорму("ОбщаяФорма.ВыборОтменитьПоездку", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверкуСети()
	Возврат СервисАвторизации.ПроверитьСвязьССервером();
КонецФункции

&НаКлиенте
Асинх Процедура СоздатьНапоминаниеНажатие(Элемент)
    #Если МобильноеПриложениеКлиент Тогда
		
		Если Статус = "В пути" Тогда
            ПоказатьПредупреждение(Неопределено, НСтр("ru='Поездка уже началась!'"));
            Возврат;
        КонецЕсли;
   
        Попытка
            ДатаУведомления = Ждать ВвестиДатуАсинх(ТекущаяДата(), "Введите дату и время уведомления", ЧастиДаты.ДатаВремя);
			
			// Проверка 1: Дата уведомления не должна быть меньше текущей
        	ТекущаяДатаВремя = ТекущаяДата();
        	Если ДатаУведомления < ТекущаяДатаВремя Тогда
            	ПоказатьПредупреждение(Неопределено, НСтр("ru='Дата уведомления не может быть меньше текущей даты и времени!'"));
            	Возврат;
        	КонецЕсли;
        
        	// Проверка 2: Разница между текущей датой и датой уведомления минимум 5 минут
        	РазницаВСекундах = ДатаУведомления - ТекущаяДатаВремя;
        	Если РазницаВСекундах < 300 Тогда // 300 секунд = 5 минут
            	ПоказатьПредупреждение(Неопределено, НСтр("ru='Дата уведомления должна быть минимум на 5 минут позже текущей даты!'"));
            	Возврат;
        	КонецЕсли;
        
        	// Проверка 3: Дата уведомления не должна быть больше даты поездки
        	ДатаПоездки = ПолучитьДатуПоездкиИзДокумента(Поездка);
        	ВремяПосадки = ПолучитьВремяОстановкиПосадки(Поездка);
        	Если ДатаПоездки = Дата(1,1,1) Или ВремяПосадки = Дата(1,1,1) Тогда
            	ПоказатьПредупреждение(Неопределено, НСтр("ru='Не удалось определить дату или время поездки!'"));
            	Возврат;
        	КонецЕсли;
            
            Уведомление = Новый ДоставляемоеУведомление;
            Уведомление.Заголовок = "Запланирована поездка";
			
            Уведомление.Текст = ПолучитьСообщениеОПоездке(ПолучитьДатуПоездкиИзДокумента(Поездка), ПолучитьВремяОстановкиПосадки(Поездка));
            Уведомление.ДатаПоявленияУниверсальноеВремя = ДатаОтправки(ДатаУведомления);
			Уведомление.Данные = "Trip_" + Строка(Поездка.УникальныйИдентификатор()) + "_" + Формат(ДатаУведомления, "ДФ=yyyyMMddHHmmss");
            
            ДоставляемыеУведомления.ДобавитьЛокальноеУведомление(Уведомление);
            Сообщить("Тестовое напоминание на " + Формат(ДатаУведомления, "ДФ='dd.MM.yyyy HH:mm:ss'") + " создано!");
			СоздатьЗаписьЛокальногоУведомления(ТекущийПользователь, Уведомление.Данные, Поездка);
            
        Исключение
            Сообщить("Ошибка при создании напоминания: " + ОписаниеОшибки());
        КонецПопытки
    #Иначе
        Сообщить("Работа с уведомлениями не поддерживается в данном контексте!");
    #КонецЕсли
КонецПроцедуры

&НаСервере
Функция ДатаОтправки(ДатаУведомления)
    РазницаДат = ДатаУведомления - ТекущаяДата();
    Возврат ТекущаяУниверсальнаяДата() + РазницаДат;
КонецФункции

&НаСервере
Функция ПолучитьДатуПоездкиИзДокумента(Поездка)
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   Поездка.ДатаПоездки КАК ДатаПоездки
        |ИЗ
        |   Документ.Поездка КАК Поездка
        |ГДЕ
        |   Поездка.Ссылка = &Поездка";
    
    Запрос.УстановитьПараметр("Поездка", Поездка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Дата(1,1,1); // Пустая дата вместо исключения
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    Возврат Выборка.ДатаПоездки;
КонецФункции

&НаСервере
Функция ПолучитьВремяОстановкиПосадки(Поездка)
    // Шаг 1: Находим адрес остановки посадки для текущего пользователя
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПоездкаЗабронированныеМеста.ОстановкаПосадки КАК ОстановкаПосадки
        |ИЗ
        |   Документ.Поездка.ЗабронированныеМеста КАК ПоездкаЗабронированныеМеста
        |ГДЕ
        |   ПоездкаЗабронированныеМеста.Ссылка = &Поездка
        |   И ПоездкаЗабронированныеМеста.Пассажир = &ТекущийПользователь";
    
    Запрос.УстановитьПараметр("Поездка", Поездка);
    Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Дата(1,1,1); // Пустая дата, если адрес не найден
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    ОстановкаПосадки = Выборка.ОстановкаПосадки;
    
    // Шаг 2: Находим время для адреса остановки посадки
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   ПоездкаМаршрутПоездки.Время КАК Время
        |ИЗ
        |   Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
        |ГДЕ
        |   ПоездкаМаршрутПоездки.Ссылка = &Поездка
        |   И ПоездкаМаршрутПоездки.Адрес = &ОстановкаПосадки";
    
    Запрос.УстановитьПараметр("Поездка", Поездка);
    Запрос.УстановитьПараметр("ОстановкаПосадки", ОстановкаПосадки);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    Если РезультатЗапроса.Пустой() Тогда
        Возврат Дата(1,1,1); // Пустая дата вместо исключения
    КонецЕсли;
    
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    Возврат Выборка.Время;
КонецФункции

&НаСервере
Функция ПолучитьСообщениеОПоездке(ДатаПоездки, ВремяПосадки)
    // Объединяем дату поездки и время посадки
    ДатаВремяПосадки = Дата(Год(ДатаПоездки), Месяц(ДатаПоездки), День(ДатаПоездки),
                            Час(ВремяПосадки), Минута(ВремяПосадки), Секунда(ВремяПосадки));
    
    // Форматируем дату и время в строку
    ФорматированнаяДата = Формат(ДатаВремяПосадки, "ДЛФ=DT");
    
    // Формируем локализованное сообщение
    Сообщение = НСтр("ru='У вас запланирована поездка на %1'");
    Сообщение = СтрШаблон(Сообщение, ФорматированнаяДата);
    
    Возврат Сообщение;
КонецФункции

&НаСервере
Процедура СоздатьЗаписьЛокальногоУведомления(Пассажир, ИдентификаторУведомления, Поездка)
    НовыйЭлемент = Справочники.ЛокальныеУведомления.СоздатьЭлемент();
    НовыйЭлемент.Пассажир = Пассажир;
    НовыйЭлемент.ИдентификаторУведомления = ИдентификаторУведомления;
    НовыйЭлемент.Поездка = Поездка;
	НовыйЭлемент.Наименование = "Пользователь_" + Пассажир;
    
    Попытка
        НовыйЭлемент.Записать();
    Исключение
        Сообщить("Ошибка при записи в справочник ЛокальныеУведомления: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры
