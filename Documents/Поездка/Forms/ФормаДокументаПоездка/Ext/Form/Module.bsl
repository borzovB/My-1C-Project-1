// Обработчик нажатия кнопки "Начать поездку" (в форме документа)
&НаКлиенте
Процедура КнопкаНачатьПоездкуНажатие(Элемент)
    НачатьПоездкуНаСервере(Объект.Ссылка);
    // Перечитываем данные формы для обновления флажка
    ЭтотОбъект.Прочитать();
    ОбновитьОтображениеДанных();
    Оповестить("ОбновитьТаблицуПоездок", Объект.Ссылка);
КонецПроцедуры

// Серверная процедура для изменения статуса документа
&НаСервере
Процедура НачатьПоездкуНаСервере(ПоездкаСсылка)
    // Получаем объект документа
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект();
    Если ДокументОбъект = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    // Пытаемся заблокировать объект для предотвращения одновременного редактирования
    Попытка
        ДокументОбъект.Заблокировать();
    Исключение
        Возврат;
    КонецПопытки;
    
    // Принудительное перечитывание данных: получаем свежую версию объекта
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект(); // Повторное получение для актуальности
    
    // Устанавливаем флаг начала поездки и текущее время
    ДокументОбъект.ПоездкаНачалась = Истина;    
    // Сохраняем документ с учетом возможных изменений
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
    Исключение
        Сообщить("Ошибка при начале поездки: " + ОписаниеОшибки());
    КонецПопытки;
    
    // Разблокируем объект
    ДокументОбъект.Разблокировать();
КонецПроцедуры

// Обработчик нажатия кнопки "Завершить поездку" (в форме документа)
&НаКлиенте
Процедура КнопкаЗавершитьПоездкуНажатие(Элемент)
    Если Не Объект.ПоездкаНачалась Тогда
        ПоказатьПредупреждение(, "Поездку можно завершить только если она началась.");
        Возврат;
    КонецЕсли;
    
    ЗавершитьПоездкуНаСервере(Объект.Ссылка);
    // Перечитываем данные формы для обновления флажка
    ЭтотОбъект.Прочитать();
    ОбновитьОтображениеДанных();
    Оповестить("ОбновитьТаблицуПоездок", Объект.Ссылка);
КонецПроцедуры

// Серверная процедура для изменения статуса документа на "Поездка завершена"
&НаСервере
Процедура ЗавершитьПоездкуНаСервере(ПоездкаСсылка)
    // Получаем объект документа
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект();
    Если ДокументОбъект = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    // Пытаемся заблокировать объект для предотвращения одновременного редактирования
    Попытка
        ДокументОбъект.Заблокировать();
    Исключение
        Возврат;
    КонецПопытки;
    
    // Перечитываем данные объекта для актуальной версии
    ДокументОбъект = ПоездкаСсылка.ПолучитьОбъект();
    
    // Устанавливаем флаг завершения поездки и текущее время
    ДокументОбъект.ПоездкаЗавершена = Истина;    
    // Сохраняем документ
    Попытка
        ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
    Исключение
        Сообщить("Ошибка при завершении поездки: " + ОписаниеОшибки());
    КонецПопытки;
    
    // Разблокируем объект
    ДокументОбъект.Разблокировать();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуТекущую(Команда)
	Закрыть();
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Если МобильноеПриложениеКлиент Тогда
       Элементы.ПоездкаНачалась.ТолькоПросмотр = Истина;
	   Элементы.ПоездкаЗавершена.ТолькоПросмотр = Истина;
    #КонецЕсли

КонецПроцедуры

// Обработчик события ПриОткрытии (для динамического обновления)
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если МобильноеПриложениеКлиент Тогда
       Элементы.ПоездкаНачалась.ТолькоПросмотр = Ложь;
	   Элементы.ПоездкаЗавершена.ТолькоПросмотр = Ложь;
    #КонецЕсли

КонецПроцедуры

&НаСервере
Функция ЭтоМобильноеПриложениеКлиент()
	#Если МобильноеПриложениеКлиент Тогда
       Возврат Истина;
    #Иначе
       Возврат Ложь;
    #КонецЕсли
КонецФункции

&НаСервереБезКонтекста
Функция ДоступноПодключениеКИнтернету()
	Возврат СервисАвторизации.ПроверитьСвязьССервером();
КонецФункции

&НаКлиенте
Процедура ПоказатьМаршрут(Команда)
	// Проверяем, что документ заполнен
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(, "Сохраните документ поездки перед построением маршрута!");
		Возврат;
	КонецЕсли;
	
	// Проверяем интернет
	#Если МобильноеПриложениеКлиент Тогда
		Если НЕ ДоступноПодключениеКИнтернету() Тогда
			ПоказатьПредупреждение(, "Нет интернет соединения!");
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	Поездка = Объект.Ссылка;
	
	#Если МобильноеПриложениеКлиент Тогда
		// Получаем данные маршрута
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		// Получаем текущее местоположение устройства (для водителя)
		ТекущееМестоположение = ПолучитьТекущееМестоположение();
		
		// Формируем URL для Google Maps
		URL = СформироватьURLМаршрута(ДанныеМаршрута, ТекущееМестоположение);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
		
		// Запускаем приложение карт
		Запуск = Новый ЗапускПриложенияМобильногоУстройства("android.intent.action.VIEW", URL);
		Попытка
			Запуск.Запустить(Ложь);
		Исключение
			ПоказатьПредупреждение(, "Ошибка запуска приложения карт: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		// Для немобильных клиентов
		ДанныеМаршрута = ПолучитьДанныеМаршрута(Поездка);
		Если ДанныеМаршрута = Неопределено ИЛИ ДанныеМаршрута.Количество() = 0 Тогда
			ПоказатьПредупреждение(, "Для выбранной поездки нет данных маршрута!");
			Возврат;
		КонецЕсли;
		
		URL = СформироватьURLМаршрута(ДанныеМаршрута);
		Если НЕ ЗначениеЗаполнено(URL) Тогда
			ПоказатьПредупреждение(, "Не удалось построить маршрут: недостаточно точек!");
			Возврат;
		КонецЕсли;
		
		Попытка
			ПерейтиПоНавигационнойСсылке(URL);
		Исключение
			ПоказатьПредупреждение(, "Ошибка открытия карты: " + ОписаниеОшибки());
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущееМестоположение()
	ТекущееМестоположение = Неопределено;
	
	#Если МобильноеПриложениеКлиент Тогда
		Провайдер = СредстваГеопозиционирования.ПолучитьСамогоЭнергоЭкономичногоПровайдера();
		Если Провайдер = Неопределено Тогда
			ПоказатьПредупреждение(, "Нет доступных провайдеров геолокации!");
			Возврат ТекущееМестоположение;
		КонецЕсли;
		
		Попытка
			Если СредстваГеопозиционирования.ОбновитьМестоположение(Провайдер.Имя, 60) Тогда
				ДанныеМестоположения = СредстваГеопозиционирования.ПолучитьПоследнееМестоположение(Провайдер.Имя);
				Если ДанныеМестоположения <> Неопределено Тогда
					Координаты = ДанныеМестоположения.Координаты;
					Если Координаты.Широта >= -90 И Координаты.Широта <= 90 И Координаты.Долгота >= -180 И Координаты.Долгота <= 180 Тогда
						ТекущееМестоположение = Новый Структура("Широта, Долгота", Координаты.Широта, Координаты.Долгота);
					Иначе
						ПоказатьПредупреждение(, "Некорректные координаты!");
					КонецЕсли;
				Иначе
					ПоказатьПредупреждение(, "Данные местоположения не получены!");
				КонецЕсли;
			Иначе
				ПоказатьПредупреждение(, "Не удалось обновить местоположение!");
			КонецЕсли;
		Исключение
			ПоказатьПредупреждение(, "Ошибка геолокации: " + ОписаниеОшибки());
		КонецПопытки;
	#Иначе
		ПоказатьПредупреждение(, "Геолокация недоступна в этом клиенте!");
	#КонецЕсли
	
	Возврат ТекущееМестоположение;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеМаршрута(Поездка)
	// Запрос к табличной части МаршрутПоездки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоездкаМаршрутПоездки.Адрес.Страна КАК Страна,
	|	ПоездкаМаршрутПоездки.Адрес.Регион КАК Регион,
	|	ПоездкаМаршрутПоездки.Адрес.Город КАК Город,
	|	ПоездкаМаршрутПоездки.Адрес.Улица КАК Улица,
	|	ПоездкаМаршрутПоездки.Адрес.Дом КАК Дом,
	|	ПоездкаМаршрутПоездки.Адрес.Индекс КАК Индекс,
	|	ПоездкаМаршрутПоездки.Время КАК Время
	|ИЗ
	|	Документ.Поездка.МаршрутПоездки КАК ПоездкаМаршрутПоездки
	|ГДЕ
	|	ПоездкаМаршрутПоездки.Ссылка = &Поездка
	|УПОРЯДОЧИТЬ ПО
	|	ПоездкаМаршрутПоездки.Время";
	
	Запрос.УстановитьПараметр("Поездка", Поездка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Формируем массив адресов
	ДанныеМаршрута = Новый Массив;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		// Проверяем обязательность поля Город
		Если НЕ ЗначениеЗаполнено(Выборка.Город) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Страна", Выборка.Страна);
		СтруктураАдреса.Вставить("Регион", Выборка.Регион);
		СтруктураАдреса.Вставить("Город", Выборка.Город);
		СтруктураАдреса.Вставить("Улица", Выборка.Улица);
		СтруктураАдреса.Вставить("Дом", Выборка.Дом);
		СтруктураАдреса.Вставить("Индекс", Выборка.Индекс);
		СтруктураАдреса.Вставить("Время", Выборка.Время);
		ДанныеМаршрута.Добавить(СтруктураАдреса);
	КонецЦикла;
	
	Возврат ?(ДанныеМаршрута.Количество() > 0, ДанныеМаршрута, Неопределено);
КонецФункции

&НаКлиенте
Функция СформироватьURLМаршрута(ДанныеМаршрута, ТекущееМестоположение = Неопределено)
	// Проверяем, есть ли минимум два адреса для маршрута
	Если ДанныеМаршрута.Количество() < 2 Тогда
		Возврат "";
	КонецЕсли;
	
	// Формируем начальную точку
	ПервыйАдрес = ДанныеМаршрута[0];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Страна) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Страна);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Регион) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПервыйАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПервыйАдрес.Дом);
	КонецЕсли;
	Начало = СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	
	// Формируем конечную точку
	ПоследнийАдрес = ДанныеМаршрута[ДанныеМаршрута.Количество() - 1];
	ЧастиАдреса = Новый Массив;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Индекс) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Индекс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Страна) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Страна);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Регион) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Регион);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Город) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Город);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Улица) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Улица);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПоследнийАдрес.Дом) Тогда
		ЧастиАдреса.Добавить(ПоследнийАдрес.Дом);
	КонецЕсли;
	Конец = СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	
	// Формируем промежуточные точки (если есть)
	ПромежуточныеТочки = "";
	Для Индекс = 1 По ДанныеМаршрута.Количество() - 2 Цикл
		Адрес = ДанныеМаршрута[Индекс];
		ЧастиАдреса = Новый Массив;
		Если ЗначениеЗаполнено(Адрес.Индекс) Тогда
			ЧастиАдреса.Добавить(Адрес.Индекс);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Страна) Тогда
			ЧастиАдреса.Добавить(Адрес.Страна);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Регион) Тогда
			ЧастиАдреса.Добавить(Адрес.Регион);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Город) Тогда
			ЧастиАдреса.Добавить(Адрес.Город);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Улица) Тогда
			ЧастиАдреса.Добавить(Адрес.Улица);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Дом) Тогда
			ЧастиАдреса.Добавить(Адрес.Дом);
		КонецЕсли;
		ПромежуточныеТочки = ПромежуточныеТочки + ?(ПромежуточныеТочки = "", "", "|") + 
			СтрЗаменить(СтрСоединить(ЧастиАдреса, ","), " ", "+");
	КонецЦикла;
		
	Если ТекущееМестоположение <> Неопределено Тогда
	     Метка = Формат(ТекущееМестоположение.Широта, "ЧРД=.; ЧГ=0") + "," + Формат(ТекущееМестоположение.Долгота, "ЧРД=.; ЧГ=0");
	     URL = URL + "&q=" + Метка;
	КонецЕсли;

	
	// Формируем URL
	URL = "https://maps.google.com/maps?saddr=" + Начало + "&daddr=" + Конец;
	Если ПромежуточныеТочки <> "" Тогда
		URL = URL + "+to:" + ПромежуточныеТочки;
	КонецЕсли;
	
	Возврат URL;
КонецФункции
